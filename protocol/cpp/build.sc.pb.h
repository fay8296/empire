// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build.sc.proto

#ifndef PROTOBUF_build_2esc_2eproto__INCLUDED
#define PROTOBUF_build_2esc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "struct.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace empire {
namespace msg {
namespace auto {
namespace sc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_build_2esc_2eproto();
void protobuf_AssignDesc_build_2esc_2eproto();
void protobuf_ShutdownFile_build_2esc_2eproto();

class SCSystemInfoMsg;
class SCStartBuildMsg;
class SCStartProduceMsg;
class SCStartResearchMsg;
class SCStartUpdateMsg;
class SCResearchInfoMsg;

// ===================================================================

class SCSystemInfoMsg : public ::google::protobuf::Message {
 public:
  SCSystemInfoMsg();
  virtual ~SCSystemInfoMsg();

  SCSystemInfoMsg(const SCSystemInfoMsg& from);

  inline SCSystemInfoMsg& operator=(const SCSystemInfoMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCSystemInfoMsg& default_instance();

  void Swap(SCSystemInfoMsg* other);

  // implements Message ----------------------------------------------

  SCSystemInfoMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCSystemInfoMsg& from);
  void MergeFrom(const SCSystemInfoMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string infoId = 1;
  inline bool has_infoid() const;
  inline void clear_infoid();
  static const int kInfoIdFieldNumber = 1;
  inline const ::std::string& infoid() const;
  inline void set_infoid(const ::std::string& value);
  inline void set_infoid(const char* value);
  inline void set_infoid(const char* value, size_t size);
  inline ::std::string* mutable_infoid();
  inline ::std::string* release_infoid();
  inline void set_allocated_infoid(::std::string* infoid);

  // repeated string params = 2;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 2;
  inline const ::std::string& params(int index) const;
  inline ::std::string* mutable_params(int index);
  inline void set_params(int index, const ::std::string& value);
  inline void set_params(int index, const char* value);
  inline void set_params(int index, const char* value, size_t size);
  inline ::std::string* add_params();
  inline void add_params(const ::std::string& value);
  inline void add_params(const char* value);
  inline void add_params(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& params() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_params();

  // optional .com.empire.msg.auto.ErrorType error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline ::com::empire::msg::auto::ErrorType error() const;
  inline void set_error(::com::empire::msg::auto::ErrorType value);

  // @@protoc_insertion_point(class_scope:com.empire.msg.auto.sc.SCSystemInfoMsg)
 private:
  inline void set_has_infoid();
  inline void clear_has_infoid();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* infoid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> params_;
  int error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_build_2esc_2eproto();
  friend void protobuf_AssignDesc_build_2esc_2eproto();
  friend void protobuf_ShutdownFile_build_2esc_2eproto();

  void InitAsDefaultInstance();
  static SCSystemInfoMsg* default_instance_;
};
// -------------------------------------------------------------------

class SCStartBuildMsg : public ::google::protobuf::Message {
 public:
  SCStartBuildMsg();
  virtual ~SCStartBuildMsg();

  SCStartBuildMsg(const SCStartBuildMsg& from);

  inline SCStartBuildMsg& operator=(const SCStartBuildMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCStartBuildMsg& default_instance();

  void Swap(SCStartBuildMsg* other);

  // implements Message ----------------------------------------------

  SCStartBuildMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCStartBuildMsg& from);
  void MergeFrom(const SCStartBuildMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional int32 leftTime = 2;
  inline bool has_lefttime() const;
  inline void clear_lefttime();
  static const int kLeftTimeFieldNumber = 2;
  inline ::google::protobuf::int32 lefttime() const;
  inline void set_lefttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.empire.msg.auto.sc.SCStartBuildMsg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lefttime();
  inline void clear_has_lefttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 lefttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_build_2esc_2eproto();
  friend void protobuf_AssignDesc_build_2esc_2eproto();
  friend void protobuf_ShutdownFile_build_2esc_2eproto();

  void InitAsDefaultInstance();
  static SCStartBuildMsg* default_instance_;
};
// -------------------------------------------------------------------

class SCStartProduceMsg : public ::google::protobuf::Message {
 public:
  SCStartProduceMsg();
  virtual ~SCStartProduceMsg();

  SCStartProduceMsg(const SCStartProduceMsg& from);

  inline SCStartProduceMsg& operator=(const SCStartProduceMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCStartProduceMsg& default_instance();

  void Swap(SCStartProduceMsg* other);

  // implements Message ----------------------------------------------

  SCStartProduceMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCStartProduceMsg& from);
  void MergeFrom(const SCStartProduceMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional int32 leftTime = 2;
  inline bool has_lefttime() const;
  inline void clear_lefttime();
  static const int kLeftTimeFieldNumber = 2;
  inline ::google::protobuf::int32 lefttime() const;
  inline void set_lefttime(::google::protobuf::int32 value);

  // optional string produceTmplId = 3;
  inline bool has_producetmplid() const;
  inline void clear_producetmplid();
  static const int kProduceTmplIdFieldNumber = 3;
  inline const ::std::string& producetmplid() const;
  inline void set_producetmplid(const ::std::string& value);
  inline void set_producetmplid(const char* value);
  inline void set_producetmplid(const char* value, size_t size);
  inline ::std::string* mutable_producetmplid();
  inline ::std::string* release_producetmplid();
  inline void set_allocated_producetmplid(::std::string* producetmplid);

  // optional int32 produceCount = 4;
  inline bool has_producecount() const;
  inline void clear_producecount();
  static const int kProduceCountFieldNumber = 4;
  inline ::google::protobuf::int32 producecount() const;
  inline void set_producecount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.empire.msg.auto.sc.SCStartProduceMsg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lefttime();
  inline void clear_has_lefttime();
  inline void set_has_producetmplid();
  inline void clear_has_producetmplid();
  inline void set_has_producecount();
  inline void clear_has_producecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* producetmplid_;
  ::google::protobuf::int32 lefttime_;
  ::google::protobuf::int32 producecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_build_2esc_2eproto();
  friend void protobuf_AssignDesc_build_2esc_2eproto();
  friend void protobuf_ShutdownFile_build_2esc_2eproto();

  void InitAsDefaultInstance();
  static SCStartProduceMsg* default_instance_;
};
// -------------------------------------------------------------------

class SCStartResearchMsg : public ::google::protobuf::Message {
 public:
  SCStartResearchMsg();
  virtual ~SCStartResearchMsg();

  SCStartResearchMsg(const SCStartResearchMsg& from);

  inline SCStartResearchMsg& operator=(const SCStartResearchMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCStartResearchMsg& default_instance();

  void Swap(SCStartResearchMsg* other);

  // implements Message ----------------------------------------------

  SCStartResearchMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCStartResearchMsg& from);
  void MergeFrom(const SCStartResearchMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string researchTmplId = 2;
  inline bool has_researchtmplid() const;
  inline void clear_researchtmplid();
  static const int kResearchTmplIdFieldNumber = 2;
  inline const ::std::string& researchtmplid() const;
  inline void set_researchtmplid(const ::std::string& value);
  inline void set_researchtmplid(const char* value);
  inline void set_researchtmplid(const char* value, size_t size);
  inline ::std::string* mutable_researchtmplid();
  inline ::std::string* release_researchtmplid();
  inline void set_allocated_researchtmplid(::std::string* researchtmplid);

  // optional int32 leftTime = 3;
  inline bool has_lefttime() const;
  inline void clear_lefttime();
  static const int kLeftTimeFieldNumber = 3;
  inline ::google::protobuf::int32 lefttime() const;
  inline void set_lefttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.empire.msg.auto.sc.SCStartResearchMsg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_researchtmplid();
  inline void clear_has_researchtmplid();
  inline void set_has_lefttime();
  inline void clear_has_lefttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* researchtmplid_;
  ::google::protobuf::int32 lefttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_build_2esc_2eproto();
  friend void protobuf_AssignDesc_build_2esc_2eproto();
  friend void protobuf_ShutdownFile_build_2esc_2eproto();

  void InitAsDefaultInstance();
  static SCStartResearchMsg* default_instance_;
};
// -------------------------------------------------------------------

class SCStartUpdateMsg : public ::google::protobuf::Message {
 public:
  SCStartUpdateMsg();
  virtual ~SCStartUpdateMsg();

  SCStartUpdateMsg(const SCStartUpdateMsg& from);

  inline SCStartUpdateMsg& operator=(const SCStartUpdateMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCStartUpdateMsg& default_instance();

  void Swap(SCStartUpdateMsg* other);

  // implements Message ----------------------------------------------

  SCStartUpdateMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCStartUpdateMsg& from);
  void MergeFrom(const SCStartUpdateMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional int32 leftTime = 2;
  inline bool has_lefttime() const;
  inline void clear_lefttime();
  static const int kLeftTimeFieldNumber = 2;
  inline ::google::protobuf::int32 lefttime() const;
  inline void set_lefttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.empire.msg.auto.sc.SCStartUpdateMsg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lefttime();
  inline void clear_has_lefttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 lefttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_build_2esc_2eproto();
  friend void protobuf_AssignDesc_build_2esc_2eproto();
  friend void protobuf_ShutdownFile_build_2esc_2eproto();

  void InitAsDefaultInstance();
  static SCStartUpdateMsg* default_instance_;
};
// -------------------------------------------------------------------

class SCResearchInfoMsg : public ::google::protobuf::Message {
 public:
  SCResearchInfoMsg();
  virtual ~SCResearchInfoMsg();

  SCResearchInfoMsg(const SCResearchInfoMsg& from);

  inline SCResearchInfoMsg& operator=(const SCResearchInfoMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCResearchInfoMsg& default_instance();

  void Swap(SCResearchInfoMsg* other);

  // implements Message ----------------------------------------------

  SCResearchInfoMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCResearchInfoMsg& from);
  void MergeFrom(const SCResearchInfoMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string researchTmplId = 1;
  inline bool has_researchtmplid() const;
  inline void clear_researchtmplid();
  static const int kResearchTmplIdFieldNumber = 1;
  inline const ::std::string& researchtmplid() const;
  inline void set_researchtmplid(const ::std::string& value);
  inline void set_researchtmplid(const char* value);
  inline void set_researchtmplid(const char* value, size_t size);
  inline ::std::string* mutable_researchtmplid();
  inline ::std::string* release_researchtmplid();
  inline void set_allocated_researchtmplid(::std::string* researchtmplid);

  // optional int32 leftTime = 2;
  inline bool has_lefttime() const;
  inline void clear_lefttime();
  static const int kLeftTimeFieldNumber = 2;
  inline ::google::protobuf::int32 lefttime() const;
  inline void set_lefttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.empire.msg.auto.sc.SCResearchInfoMsg)
 private:
  inline void set_has_researchtmplid();
  inline void clear_has_researchtmplid();
  inline void set_has_lefttime();
  inline void clear_has_lefttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* researchtmplid_;
  ::google::protobuf::int32 lefttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_build_2esc_2eproto();
  friend void protobuf_AssignDesc_build_2esc_2eproto();
  friend void protobuf_ShutdownFile_build_2esc_2eproto();

  void InitAsDefaultInstance();
  static SCResearchInfoMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// SCSystemInfoMsg

// optional string infoId = 1;
inline bool SCSystemInfoMsg::has_infoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCSystemInfoMsg::set_has_infoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCSystemInfoMsg::clear_has_infoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCSystemInfoMsg::clear_infoid() {
  if (infoid_ != &::google::protobuf::internal::kEmptyString) {
    infoid_->clear();
  }
  clear_has_infoid();
}
inline const ::std::string& SCSystemInfoMsg::infoid() const {
  return *infoid_;
}
inline void SCSystemInfoMsg::set_infoid(const ::std::string& value) {
  set_has_infoid();
  if (infoid_ == &::google::protobuf::internal::kEmptyString) {
    infoid_ = new ::std::string;
  }
  infoid_->assign(value);
}
inline void SCSystemInfoMsg::set_infoid(const char* value) {
  set_has_infoid();
  if (infoid_ == &::google::protobuf::internal::kEmptyString) {
    infoid_ = new ::std::string;
  }
  infoid_->assign(value);
}
inline void SCSystemInfoMsg::set_infoid(const char* value, size_t size) {
  set_has_infoid();
  if (infoid_ == &::google::protobuf::internal::kEmptyString) {
    infoid_ = new ::std::string;
  }
  infoid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCSystemInfoMsg::mutable_infoid() {
  set_has_infoid();
  if (infoid_ == &::google::protobuf::internal::kEmptyString) {
    infoid_ = new ::std::string;
  }
  return infoid_;
}
inline ::std::string* SCSystemInfoMsg::release_infoid() {
  clear_has_infoid();
  if (infoid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = infoid_;
    infoid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCSystemInfoMsg::set_allocated_infoid(::std::string* infoid) {
  if (infoid_ != &::google::protobuf::internal::kEmptyString) {
    delete infoid_;
  }
  if (infoid) {
    set_has_infoid();
    infoid_ = infoid;
  } else {
    clear_has_infoid();
    infoid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string params = 2;
inline int SCSystemInfoMsg::params_size() const {
  return params_.size();
}
inline void SCSystemInfoMsg::clear_params() {
  params_.Clear();
}
inline const ::std::string& SCSystemInfoMsg::params(int index) const {
  return params_.Get(index);
}
inline ::std::string* SCSystemInfoMsg::mutable_params(int index) {
  return params_.Mutable(index);
}
inline void SCSystemInfoMsg::set_params(int index, const ::std::string& value) {
  params_.Mutable(index)->assign(value);
}
inline void SCSystemInfoMsg::set_params(int index, const char* value) {
  params_.Mutable(index)->assign(value);
}
inline void SCSystemInfoMsg::set_params(int index, const char* value, size_t size) {
  params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCSystemInfoMsg::add_params() {
  return params_.Add();
}
inline void SCSystemInfoMsg::add_params(const ::std::string& value) {
  params_.Add()->assign(value);
}
inline void SCSystemInfoMsg::add_params(const char* value) {
  params_.Add()->assign(value);
}
inline void SCSystemInfoMsg::add_params(const char* value, size_t size) {
  params_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SCSystemInfoMsg::params() const {
  return params_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SCSystemInfoMsg::mutable_params() {
  return &params_;
}

// optional .com.empire.msg.auto.ErrorType error = 3;
inline bool SCSystemInfoMsg::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCSystemInfoMsg::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCSystemInfoMsg::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCSystemInfoMsg::clear_error() {
  error_ = 1;
  clear_has_error();
}
inline ::com::empire::msg::auto::ErrorType SCSystemInfoMsg::error() const {
  return static_cast< ::com::empire::msg::auto::ErrorType >(error_);
}
inline void SCSystemInfoMsg::set_error(::com::empire::msg::auto::ErrorType value) {
  assert(::com::empire::msg::auto::ErrorType_IsValid(value));
  set_has_error();
  error_ = value;
}

// -------------------------------------------------------------------

// SCStartBuildMsg

// optional string id = 1;
inline bool SCStartBuildMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCStartBuildMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCStartBuildMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCStartBuildMsg::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SCStartBuildMsg::id() const {
  return *id_;
}
inline void SCStartBuildMsg::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SCStartBuildMsg::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SCStartBuildMsg::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCStartBuildMsg::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SCStartBuildMsg::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCStartBuildMsg::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 leftTime = 2;
inline bool SCStartBuildMsg::has_lefttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCStartBuildMsg::set_has_lefttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCStartBuildMsg::clear_has_lefttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCStartBuildMsg::clear_lefttime() {
  lefttime_ = 0;
  clear_has_lefttime();
}
inline ::google::protobuf::int32 SCStartBuildMsg::lefttime() const {
  return lefttime_;
}
inline void SCStartBuildMsg::set_lefttime(::google::protobuf::int32 value) {
  set_has_lefttime();
  lefttime_ = value;
}

// -------------------------------------------------------------------

// SCStartProduceMsg

// optional string id = 1;
inline bool SCStartProduceMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCStartProduceMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCStartProduceMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCStartProduceMsg::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SCStartProduceMsg::id() const {
  return *id_;
}
inline void SCStartProduceMsg::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SCStartProduceMsg::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SCStartProduceMsg::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCStartProduceMsg::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SCStartProduceMsg::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCStartProduceMsg::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 leftTime = 2;
inline bool SCStartProduceMsg::has_lefttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCStartProduceMsg::set_has_lefttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCStartProduceMsg::clear_has_lefttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCStartProduceMsg::clear_lefttime() {
  lefttime_ = 0;
  clear_has_lefttime();
}
inline ::google::protobuf::int32 SCStartProduceMsg::lefttime() const {
  return lefttime_;
}
inline void SCStartProduceMsg::set_lefttime(::google::protobuf::int32 value) {
  set_has_lefttime();
  lefttime_ = value;
}

// optional string produceTmplId = 3;
inline bool SCStartProduceMsg::has_producetmplid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCStartProduceMsg::set_has_producetmplid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCStartProduceMsg::clear_has_producetmplid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCStartProduceMsg::clear_producetmplid() {
  if (producetmplid_ != &::google::protobuf::internal::kEmptyString) {
    producetmplid_->clear();
  }
  clear_has_producetmplid();
}
inline const ::std::string& SCStartProduceMsg::producetmplid() const {
  return *producetmplid_;
}
inline void SCStartProduceMsg::set_producetmplid(const ::std::string& value) {
  set_has_producetmplid();
  if (producetmplid_ == &::google::protobuf::internal::kEmptyString) {
    producetmplid_ = new ::std::string;
  }
  producetmplid_->assign(value);
}
inline void SCStartProduceMsg::set_producetmplid(const char* value) {
  set_has_producetmplid();
  if (producetmplid_ == &::google::protobuf::internal::kEmptyString) {
    producetmplid_ = new ::std::string;
  }
  producetmplid_->assign(value);
}
inline void SCStartProduceMsg::set_producetmplid(const char* value, size_t size) {
  set_has_producetmplid();
  if (producetmplid_ == &::google::protobuf::internal::kEmptyString) {
    producetmplid_ = new ::std::string;
  }
  producetmplid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCStartProduceMsg::mutable_producetmplid() {
  set_has_producetmplid();
  if (producetmplid_ == &::google::protobuf::internal::kEmptyString) {
    producetmplid_ = new ::std::string;
  }
  return producetmplid_;
}
inline ::std::string* SCStartProduceMsg::release_producetmplid() {
  clear_has_producetmplid();
  if (producetmplid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = producetmplid_;
    producetmplid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCStartProduceMsg::set_allocated_producetmplid(::std::string* producetmplid) {
  if (producetmplid_ != &::google::protobuf::internal::kEmptyString) {
    delete producetmplid_;
  }
  if (producetmplid) {
    set_has_producetmplid();
    producetmplid_ = producetmplid;
  } else {
    clear_has_producetmplid();
    producetmplid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 produceCount = 4;
inline bool SCStartProduceMsg::has_producecount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SCStartProduceMsg::set_has_producecount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SCStartProduceMsg::clear_has_producecount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SCStartProduceMsg::clear_producecount() {
  producecount_ = 0;
  clear_has_producecount();
}
inline ::google::protobuf::int32 SCStartProduceMsg::producecount() const {
  return producecount_;
}
inline void SCStartProduceMsg::set_producecount(::google::protobuf::int32 value) {
  set_has_producecount();
  producecount_ = value;
}

// -------------------------------------------------------------------

// SCStartResearchMsg

// optional string id = 1;
inline bool SCStartResearchMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCStartResearchMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCStartResearchMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCStartResearchMsg::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SCStartResearchMsg::id() const {
  return *id_;
}
inline void SCStartResearchMsg::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SCStartResearchMsg::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SCStartResearchMsg::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCStartResearchMsg::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SCStartResearchMsg::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCStartResearchMsg::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string researchTmplId = 2;
inline bool SCStartResearchMsg::has_researchtmplid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCStartResearchMsg::set_has_researchtmplid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCStartResearchMsg::clear_has_researchtmplid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCStartResearchMsg::clear_researchtmplid() {
  if (researchtmplid_ != &::google::protobuf::internal::kEmptyString) {
    researchtmplid_->clear();
  }
  clear_has_researchtmplid();
}
inline const ::std::string& SCStartResearchMsg::researchtmplid() const {
  return *researchtmplid_;
}
inline void SCStartResearchMsg::set_researchtmplid(const ::std::string& value) {
  set_has_researchtmplid();
  if (researchtmplid_ == &::google::protobuf::internal::kEmptyString) {
    researchtmplid_ = new ::std::string;
  }
  researchtmplid_->assign(value);
}
inline void SCStartResearchMsg::set_researchtmplid(const char* value) {
  set_has_researchtmplid();
  if (researchtmplid_ == &::google::protobuf::internal::kEmptyString) {
    researchtmplid_ = new ::std::string;
  }
  researchtmplid_->assign(value);
}
inline void SCStartResearchMsg::set_researchtmplid(const char* value, size_t size) {
  set_has_researchtmplid();
  if (researchtmplid_ == &::google::protobuf::internal::kEmptyString) {
    researchtmplid_ = new ::std::string;
  }
  researchtmplid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCStartResearchMsg::mutable_researchtmplid() {
  set_has_researchtmplid();
  if (researchtmplid_ == &::google::protobuf::internal::kEmptyString) {
    researchtmplid_ = new ::std::string;
  }
  return researchtmplid_;
}
inline ::std::string* SCStartResearchMsg::release_researchtmplid() {
  clear_has_researchtmplid();
  if (researchtmplid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = researchtmplid_;
    researchtmplid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCStartResearchMsg::set_allocated_researchtmplid(::std::string* researchtmplid) {
  if (researchtmplid_ != &::google::protobuf::internal::kEmptyString) {
    delete researchtmplid_;
  }
  if (researchtmplid) {
    set_has_researchtmplid();
    researchtmplid_ = researchtmplid;
  } else {
    clear_has_researchtmplid();
    researchtmplid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 leftTime = 3;
inline bool SCStartResearchMsg::has_lefttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCStartResearchMsg::set_has_lefttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCStartResearchMsg::clear_has_lefttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCStartResearchMsg::clear_lefttime() {
  lefttime_ = 0;
  clear_has_lefttime();
}
inline ::google::protobuf::int32 SCStartResearchMsg::lefttime() const {
  return lefttime_;
}
inline void SCStartResearchMsg::set_lefttime(::google::protobuf::int32 value) {
  set_has_lefttime();
  lefttime_ = value;
}

// -------------------------------------------------------------------

// SCStartUpdateMsg

// optional string id = 1;
inline bool SCStartUpdateMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCStartUpdateMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCStartUpdateMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCStartUpdateMsg::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SCStartUpdateMsg::id() const {
  return *id_;
}
inline void SCStartUpdateMsg::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SCStartUpdateMsg::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SCStartUpdateMsg::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCStartUpdateMsg::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SCStartUpdateMsg::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCStartUpdateMsg::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 leftTime = 2;
inline bool SCStartUpdateMsg::has_lefttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCStartUpdateMsg::set_has_lefttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCStartUpdateMsg::clear_has_lefttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCStartUpdateMsg::clear_lefttime() {
  lefttime_ = 0;
  clear_has_lefttime();
}
inline ::google::protobuf::int32 SCStartUpdateMsg::lefttime() const {
  return lefttime_;
}
inline void SCStartUpdateMsg::set_lefttime(::google::protobuf::int32 value) {
  set_has_lefttime();
  lefttime_ = value;
}

// -------------------------------------------------------------------

// SCResearchInfoMsg

// optional string researchTmplId = 1;
inline bool SCResearchInfoMsg::has_researchtmplid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCResearchInfoMsg::set_has_researchtmplid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCResearchInfoMsg::clear_has_researchtmplid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCResearchInfoMsg::clear_researchtmplid() {
  if (researchtmplid_ != &::google::protobuf::internal::kEmptyString) {
    researchtmplid_->clear();
  }
  clear_has_researchtmplid();
}
inline const ::std::string& SCResearchInfoMsg::researchtmplid() const {
  return *researchtmplid_;
}
inline void SCResearchInfoMsg::set_researchtmplid(const ::std::string& value) {
  set_has_researchtmplid();
  if (researchtmplid_ == &::google::protobuf::internal::kEmptyString) {
    researchtmplid_ = new ::std::string;
  }
  researchtmplid_->assign(value);
}
inline void SCResearchInfoMsg::set_researchtmplid(const char* value) {
  set_has_researchtmplid();
  if (researchtmplid_ == &::google::protobuf::internal::kEmptyString) {
    researchtmplid_ = new ::std::string;
  }
  researchtmplid_->assign(value);
}
inline void SCResearchInfoMsg::set_researchtmplid(const char* value, size_t size) {
  set_has_researchtmplid();
  if (researchtmplid_ == &::google::protobuf::internal::kEmptyString) {
    researchtmplid_ = new ::std::string;
  }
  researchtmplid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCResearchInfoMsg::mutable_researchtmplid() {
  set_has_researchtmplid();
  if (researchtmplid_ == &::google::protobuf::internal::kEmptyString) {
    researchtmplid_ = new ::std::string;
  }
  return researchtmplid_;
}
inline ::std::string* SCResearchInfoMsg::release_researchtmplid() {
  clear_has_researchtmplid();
  if (researchtmplid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = researchtmplid_;
    researchtmplid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCResearchInfoMsg::set_allocated_researchtmplid(::std::string* researchtmplid) {
  if (researchtmplid_ != &::google::protobuf::internal::kEmptyString) {
    delete researchtmplid_;
  }
  if (researchtmplid) {
    set_has_researchtmplid();
    researchtmplid_ = researchtmplid;
  } else {
    clear_has_researchtmplid();
    researchtmplid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 leftTime = 2;
inline bool SCResearchInfoMsg::has_lefttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCResearchInfoMsg::set_has_lefttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCResearchInfoMsg::clear_has_lefttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCResearchInfoMsg::clear_lefttime() {
  lefttime_ = 0;
  clear_has_lefttime();
}
inline ::google::protobuf::int32 SCResearchInfoMsg::lefttime() const {
  return lefttime_;
}
inline void SCResearchInfoMsg::set_lefttime(::google::protobuf::int32 value) {
  set_has_lefttime();
  lefttime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sc
}  // namespace auto
}  // namespace msg
}  // namespace empire
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_build_2esc_2eproto__INCLUDED
