// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build.cs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "build.cs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace empire {
namespace msg {
namespace cs {

namespace {

const ::google::protobuf::Descriptor* CSStartBuildMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSStartBuildMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSStartProduceMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSStartProduceMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSStartResearchMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSStartResearchMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSStartUpdateMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSStartUpdateMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSQueryResearchInfoMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSQueryResearchInfoMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_build_2ecs_2eproto() {
  protobuf_AddDesc_build_2ecs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "build.cs.proto");
  GOOGLE_CHECK(file != NULL);
  CSStartBuildMsg_descriptor_ = file->message_type(0);
  static const int CSStartBuildMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStartBuildMsg, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStartBuildMsg, tmplid_),
  };
  CSStartBuildMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSStartBuildMsg_descriptor_,
      CSStartBuildMsg::default_instance_,
      CSStartBuildMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStartBuildMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStartBuildMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSStartBuildMsg));
  CSStartProduceMsg_descriptor_ = file->message_type(1);
  static const int CSStartProduceMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStartProduceMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStartProduceMsg, producetmplid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStartProduceMsg, producecount_),
  };
  CSStartProduceMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSStartProduceMsg_descriptor_,
      CSStartProduceMsg::default_instance_,
      CSStartProduceMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStartProduceMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStartProduceMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSStartProduceMsg));
  CSStartResearchMsg_descriptor_ = file->message_type(2);
  static const int CSStartResearchMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStartResearchMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStartResearchMsg, researchtmplid_),
  };
  CSStartResearchMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSStartResearchMsg_descriptor_,
      CSStartResearchMsg::default_instance_,
      CSStartResearchMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStartResearchMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStartResearchMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSStartResearchMsg));
  CSStartUpdateMsg_descriptor_ = file->message_type(3);
  static const int CSStartUpdateMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStartUpdateMsg, id_),
  };
  CSStartUpdateMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSStartUpdateMsg_descriptor_,
      CSStartUpdateMsg::default_instance_,
      CSStartUpdateMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStartUpdateMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSStartUpdateMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSStartUpdateMsg));
  CSQueryResearchInfoMsg_descriptor_ = file->message_type(4);
  static const int CSQueryResearchInfoMsg_offsets_[1] = {
  };
  CSQueryResearchInfoMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSQueryResearchInfoMsg_descriptor_,
      CSQueryResearchInfoMsg::default_instance_,
      CSQueryResearchInfoMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryResearchInfoMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSQueryResearchInfoMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSQueryResearchInfoMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_build_2ecs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSStartBuildMsg_descriptor_, &CSStartBuildMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSStartProduceMsg_descriptor_, &CSStartProduceMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSStartResearchMsg_descriptor_, &CSStartResearchMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSStartUpdateMsg_descriptor_, &CSStartUpdateMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSQueryResearchInfoMsg_descriptor_, &CSQueryResearchInfoMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_build_2ecs_2eproto() {
  delete CSStartBuildMsg::default_instance_;
  delete CSStartBuildMsg_reflection_;
  delete CSStartProduceMsg::default_instance_;
  delete CSStartProduceMsg_reflection_;
  delete CSStartResearchMsg::default_instance_;
  delete CSStartResearchMsg_reflection_;
  delete CSStartUpdateMsg::default_instance_;
  delete CSStartUpdateMsg_reflection_;
  delete CSQueryResearchInfoMsg::default_instance_;
  delete CSQueryResearchInfoMsg_reflection_;
}

void protobuf_AddDesc_build_2ecs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016build.cs.proto\022\021com.empire.msg.cs\".\n\017C"
    "SStartBuildMsg\022\013\n\003pos\030\001 \001(\005\022\016\n\006tmplId\030\002 "
    "\001(\t\"L\n\021CSStartProduceMsg\022\n\n\002id\030\001 \001(\t\022\025\n\r"
    "produceTmplId\030\002 \001(\t\022\024\n\014produceCount\030\003 \001("
    "\005\"8\n\022CSStartResearchMsg\022\n\n\002id\030\001 \001(\t\022\026\n\016r"
    "esearchTmplId\030\002 \001(\t\"\036\n\020CSStartUpdateMsg\022"
    "\n\n\002id\030\001 \001(\t\"\030\n\026CSQueryResearchInfoMsg", 277);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "build.cs.proto", &protobuf_RegisterTypes);
  CSStartBuildMsg::default_instance_ = new CSStartBuildMsg();
  CSStartProduceMsg::default_instance_ = new CSStartProduceMsg();
  CSStartResearchMsg::default_instance_ = new CSStartResearchMsg();
  CSStartUpdateMsg::default_instance_ = new CSStartUpdateMsg();
  CSQueryResearchInfoMsg::default_instance_ = new CSQueryResearchInfoMsg();
  CSStartBuildMsg::default_instance_->InitAsDefaultInstance();
  CSStartProduceMsg::default_instance_->InitAsDefaultInstance();
  CSStartResearchMsg::default_instance_->InitAsDefaultInstance();
  CSStartUpdateMsg::default_instance_->InitAsDefaultInstance();
  CSQueryResearchInfoMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_build_2ecs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_build_2ecs_2eproto {
  StaticDescriptorInitializer_build_2ecs_2eproto() {
    protobuf_AddDesc_build_2ecs_2eproto();
  }
} static_descriptor_initializer_build_2ecs_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CSStartBuildMsg::kPosFieldNumber;
const int CSStartBuildMsg::kTmplIdFieldNumber;
#endif  // !_MSC_VER

CSStartBuildMsg::CSStartBuildMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSStartBuildMsg::InitAsDefaultInstance() {
}

CSStartBuildMsg::CSStartBuildMsg(const CSStartBuildMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSStartBuildMsg::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  tmplid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSStartBuildMsg::~CSStartBuildMsg() {
  SharedDtor();
}

void CSStartBuildMsg::SharedDtor() {
  if (tmplid_ != &::google::protobuf::internal::kEmptyString) {
    delete tmplid_;
  }
  if (this != default_instance_) {
  }
}

void CSStartBuildMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSStartBuildMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSStartBuildMsg_descriptor_;
}

const CSStartBuildMsg& CSStartBuildMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2ecs_2eproto();
  return *default_instance_;
}

CSStartBuildMsg* CSStartBuildMsg::default_instance_ = NULL;

CSStartBuildMsg* CSStartBuildMsg::New() const {
  return new CSStartBuildMsg;
}

void CSStartBuildMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    if (has_tmplid()) {
      if (tmplid_ != &::google::protobuf::internal::kEmptyString) {
        tmplid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSStartBuildMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tmplId;
        break;
      }

      // optional string tmplId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tmplId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tmplid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tmplid().data(), this->tmplid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSStartBuildMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // optional string tmplId = 2;
  if (has_tmplid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tmplid().data(), this->tmplid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tmplid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSStartBuildMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // optional string tmplId = 2;
  if (has_tmplid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tmplid().data(), this->tmplid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tmplid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSStartBuildMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional string tmplId = 2;
    if (has_tmplid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tmplid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSStartBuildMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSStartBuildMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSStartBuildMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSStartBuildMsg::MergeFrom(const CSStartBuildMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_tmplid()) {
      set_tmplid(from.tmplid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSStartBuildMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSStartBuildMsg::CopyFrom(const CSStartBuildMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSStartBuildMsg::IsInitialized() const {

  return true;
}

void CSStartBuildMsg::Swap(CSStartBuildMsg* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(tmplid_, other->tmplid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSStartBuildMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSStartBuildMsg_descriptor_;
  metadata.reflection = CSStartBuildMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSStartProduceMsg::kIdFieldNumber;
const int CSStartProduceMsg::kProduceTmplIdFieldNumber;
const int CSStartProduceMsg::kProduceCountFieldNumber;
#endif  // !_MSC_VER

CSStartProduceMsg::CSStartProduceMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSStartProduceMsg::InitAsDefaultInstance() {
}

CSStartProduceMsg::CSStartProduceMsg(const CSStartProduceMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSStartProduceMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  producetmplid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  producecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSStartProduceMsg::~CSStartProduceMsg() {
  SharedDtor();
}

void CSStartProduceMsg::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (producetmplid_ != &::google::protobuf::internal::kEmptyString) {
    delete producetmplid_;
  }
  if (this != default_instance_) {
  }
}

void CSStartProduceMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSStartProduceMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSStartProduceMsg_descriptor_;
}

const CSStartProduceMsg& CSStartProduceMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2ecs_2eproto();
  return *default_instance_;
}

CSStartProduceMsg* CSStartProduceMsg::default_instance_ = NULL;

CSStartProduceMsg* CSStartProduceMsg::New() const {
  return new CSStartProduceMsg;
}

void CSStartProduceMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_producetmplid()) {
      if (producetmplid_ != &::google::protobuf::internal::kEmptyString) {
        producetmplid_->clear();
      }
    }
    producecount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSStartProduceMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_produceTmplId;
        break;
      }

      // optional string produceTmplId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_produceTmplId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_producetmplid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->producetmplid().data(), this->producetmplid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_produceCount;
        break;
      }

      // optional int32 produceCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_produceCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &producecount_)));
          set_has_producecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSStartProduceMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string produceTmplId = 2;
  if (has_producetmplid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->producetmplid().data(), this->producetmplid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->producetmplid(), output);
  }

  // optional int32 produceCount = 3;
  if (has_producecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->producecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSStartProduceMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string produceTmplId = 2;
  if (has_producetmplid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->producetmplid().data(), this->producetmplid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->producetmplid(), target);
  }

  // optional int32 produceCount = 3;
  if (has_producecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->producecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSStartProduceMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string produceTmplId = 2;
    if (has_producetmplid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->producetmplid());
    }

    // optional int32 produceCount = 3;
    if (has_producecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->producecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSStartProduceMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSStartProduceMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSStartProduceMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSStartProduceMsg::MergeFrom(const CSStartProduceMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_producetmplid()) {
      set_producetmplid(from.producetmplid());
    }
    if (from.has_producecount()) {
      set_producecount(from.producecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSStartProduceMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSStartProduceMsg::CopyFrom(const CSStartProduceMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSStartProduceMsg::IsInitialized() const {

  return true;
}

void CSStartProduceMsg::Swap(CSStartProduceMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(producetmplid_, other->producetmplid_);
    std::swap(producecount_, other->producecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSStartProduceMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSStartProduceMsg_descriptor_;
  metadata.reflection = CSStartProduceMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSStartResearchMsg::kIdFieldNumber;
const int CSStartResearchMsg::kResearchTmplIdFieldNumber;
#endif  // !_MSC_VER

CSStartResearchMsg::CSStartResearchMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSStartResearchMsg::InitAsDefaultInstance() {
}

CSStartResearchMsg::CSStartResearchMsg(const CSStartResearchMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSStartResearchMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  researchtmplid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSStartResearchMsg::~CSStartResearchMsg() {
  SharedDtor();
}

void CSStartResearchMsg::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (researchtmplid_ != &::google::protobuf::internal::kEmptyString) {
    delete researchtmplid_;
  }
  if (this != default_instance_) {
  }
}

void CSStartResearchMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSStartResearchMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSStartResearchMsg_descriptor_;
}

const CSStartResearchMsg& CSStartResearchMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2ecs_2eproto();
  return *default_instance_;
}

CSStartResearchMsg* CSStartResearchMsg::default_instance_ = NULL;

CSStartResearchMsg* CSStartResearchMsg::New() const {
  return new CSStartResearchMsg;
}

void CSStartResearchMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_researchtmplid()) {
      if (researchtmplid_ != &::google::protobuf::internal::kEmptyString) {
        researchtmplid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSStartResearchMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_researchTmplId;
        break;
      }

      // optional string researchTmplId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_researchTmplId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_researchtmplid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->researchtmplid().data(), this->researchtmplid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSStartResearchMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string researchTmplId = 2;
  if (has_researchtmplid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->researchtmplid().data(), this->researchtmplid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->researchtmplid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSStartResearchMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string researchTmplId = 2;
  if (has_researchtmplid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->researchtmplid().data(), this->researchtmplid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->researchtmplid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSStartResearchMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string researchTmplId = 2;
    if (has_researchtmplid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->researchtmplid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSStartResearchMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSStartResearchMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSStartResearchMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSStartResearchMsg::MergeFrom(const CSStartResearchMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_researchtmplid()) {
      set_researchtmplid(from.researchtmplid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSStartResearchMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSStartResearchMsg::CopyFrom(const CSStartResearchMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSStartResearchMsg::IsInitialized() const {

  return true;
}

void CSStartResearchMsg::Swap(CSStartResearchMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(researchtmplid_, other->researchtmplid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSStartResearchMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSStartResearchMsg_descriptor_;
  metadata.reflection = CSStartResearchMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSStartUpdateMsg::kIdFieldNumber;
#endif  // !_MSC_VER

CSStartUpdateMsg::CSStartUpdateMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSStartUpdateMsg::InitAsDefaultInstance() {
}

CSStartUpdateMsg::CSStartUpdateMsg(const CSStartUpdateMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSStartUpdateMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSStartUpdateMsg::~CSStartUpdateMsg() {
  SharedDtor();
}

void CSStartUpdateMsg::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void CSStartUpdateMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSStartUpdateMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSStartUpdateMsg_descriptor_;
}

const CSStartUpdateMsg& CSStartUpdateMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2ecs_2eproto();
  return *default_instance_;
}

CSStartUpdateMsg* CSStartUpdateMsg::default_instance_ = NULL;

CSStartUpdateMsg* CSStartUpdateMsg::New() const {
  return new CSStartUpdateMsg;
}

void CSStartUpdateMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSStartUpdateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSStartUpdateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSStartUpdateMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSStartUpdateMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSStartUpdateMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSStartUpdateMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSStartUpdateMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSStartUpdateMsg::MergeFrom(const CSStartUpdateMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSStartUpdateMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSStartUpdateMsg::CopyFrom(const CSStartUpdateMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSStartUpdateMsg::IsInitialized() const {

  return true;
}

void CSStartUpdateMsg::Swap(CSStartUpdateMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSStartUpdateMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSStartUpdateMsg_descriptor_;
  metadata.reflection = CSStartUpdateMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSQueryResearchInfoMsg::CSQueryResearchInfoMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSQueryResearchInfoMsg::InitAsDefaultInstance() {
}

CSQueryResearchInfoMsg::CSQueryResearchInfoMsg(const CSQueryResearchInfoMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryResearchInfoMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryResearchInfoMsg::~CSQueryResearchInfoMsg() {
  SharedDtor();
}

void CSQueryResearchInfoMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSQueryResearchInfoMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSQueryResearchInfoMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSQueryResearchInfoMsg_descriptor_;
}

const CSQueryResearchInfoMsg& CSQueryResearchInfoMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2ecs_2eproto();
  return *default_instance_;
}

CSQueryResearchInfoMsg* CSQueryResearchInfoMsg::default_instance_ = NULL;

CSQueryResearchInfoMsg* CSQueryResearchInfoMsg::New() const {
  return new CSQueryResearchInfoMsg;
}

void CSQueryResearchInfoMsg::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSQueryResearchInfoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSQueryResearchInfoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSQueryResearchInfoMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSQueryResearchInfoMsg::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryResearchInfoMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSQueryResearchInfoMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSQueryResearchInfoMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSQueryResearchInfoMsg::MergeFrom(const CSQueryResearchInfoMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSQueryResearchInfoMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSQueryResearchInfoMsg::CopyFrom(const CSQueryResearchInfoMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryResearchInfoMsg::IsInitialized() const {

  return true;
}

void CSQueryResearchInfoMsg::Swap(CSQueryResearchInfoMsg* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSQueryResearchInfoMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSQueryResearchInfoMsg_descriptor_;
  metadata.reflection = CSQueryResearchInfoMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cs
}  // namespace msg
}  // namespace empire
}  // namespace com

// @@protoc_insertion_point(global_scope)
