// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SC.SCPlayerInfoMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SC.SCPlayerInfoMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace empire {
namespace msg {
namespace sc {

namespace {

const ::google::protobuf::Descriptor* SCPlayerInfoMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCPlayerInfoMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SC_2eSCPlayerInfoMsg_2eproto() {
  protobuf_AddDesc_SC_2eSCPlayerInfoMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SC.SCPlayerInfoMsg.proto");
  GOOGLE_CHECK(file != NULL);
  SCPlayerInfoMsg_descriptor_ = file->message_type(0);
  static const int SCPlayerInfoMsg_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPlayerInfoMsg, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPlayerInfoMsg, lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPlayerInfoMsg, reputationlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPlayerInfoMsg, govlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPlayerInfoMsg, jwlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPlayerInfoMsg, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPlayerInfoMsg, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPlayerInfoMsg, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPlayerInfoMsg, iron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPlayerInfoMsg, tree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPlayerInfoMsg, oil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPlayerInfoMsg, magicstone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPlayerInfoMsg, buildinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPlayerInfoMsg, boatinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPlayerInfoMsg, viplvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPlayerInfoMsg, name_),
  };
  SCPlayerInfoMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCPlayerInfoMsg_descriptor_,
      SCPlayerInfoMsg::default_instance_,
      SCPlayerInfoMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPlayerInfoMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCPlayerInfoMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCPlayerInfoMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SC_2eSCPlayerInfoMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCPlayerInfoMsg_descriptor_, &SCPlayerInfoMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SC_2eSCPlayerInfoMsg_2eproto() {
  delete SCPlayerInfoMsg::default_instance_;
  delete SCPlayerInfoMsg_reflection_;
}

void protobuf_AddDesc_SC_2eSCPlayerInfoMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::empire::msg::protobuf_AddDesc_struct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030SC.SCPlayerInfoMsg.proto\022\021com.empire.m"
    "sg.sc\032\014struct.proto\"\304\002\n\017SCPlayerInfoMsg\022"
    "\013\n\003sex\030\001 \001(\005\022\013\n\003lvl\030\002 \001(\005\022\025\n\rreputationL"
    "vl\030\003 \001(\005\022\016\n\006govLvl\030\004 \001(\005\022\r\n\005jwLvl\030\005 \001(\005\022"
    "\013\n\003exp\030\006 \001(\005\022\017\n\007diamond\030\007 \001(\003\022\014\n\004gold\030\010 "
    "\001(\003\022\014\n\004iron\030\t \001(\003\022\014\n\004tree\030\n \001(\003\022\013\n\003oil\030\013"
    " \001(\003\022\022\n\nmagicStone\030\014 \001(\003\022-\n\nbuildInfos\030\r"
    " \003(\0132\031.com.empire.msg.BuildInfo\022+\n\tboatI"
    "nfos\030\016 \003(\0132\030.com.empire.msg.BoatInfo\022\016\n\006"
    "vipLvl\030\017 \001(\003\022\014\n\004name\030\020 \001(\t", 386);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SC.SCPlayerInfoMsg.proto", &protobuf_RegisterTypes);
  SCPlayerInfoMsg::default_instance_ = new SCPlayerInfoMsg();
  SCPlayerInfoMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SC_2eSCPlayerInfoMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SC_2eSCPlayerInfoMsg_2eproto {
  StaticDescriptorInitializer_SC_2eSCPlayerInfoMsg_2eproto() {
    protobuf_AddDesc_SC_2eSCPlayerInfoMsg_2eproto();
  }
} static_descriptor_initializer_SC_2eSCPlayerInfoMsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SCPlayerInfoMsg::kSexFieldNumber;
const int SCPlayerInfoMsg::kLvlFieldNumber;
const int SCPlayerInfoMsg::kReputationLvlFieldNumber;
const int SCPlayerInfoMsg::kGovLvlFieldNumber;
const int SCPlayerInfoMsg::kJwLvlFieldNumber;
const int SCPlayerInfoMsg::kExpFieldNumber;
const int SCPlayerInfoMsg::kDiamondFieldNumber;
const int SCPlayerInfoMsg::kGoldFieldNumber;
const int SCPlayerInfoMsg::kIronFieldNumber;
const int SCPlayerInfoMsg::kTreeFieldNumber;
const int SCPlayerInfoMsg::kOilFieldNumber;
const int SCPlayerInfoMsg::kMagicStoneFieldNumber;
const int SCPlayerInfoMsg::kBuildInfosFieldNumber;
const int SCPlayerInfoMsg::kBoatInfosFieldNumber;
const int SCPlayerInfoMsg::kVipLvlFieldNumber;
const int SCPlayerInfoMsg::kNameFieldNumber;
#endif  // !_MSC_VER

SCPlayerInfoMsg::SCPlayerInfoMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCPlayerInfoMsg::InitAsDefaultInstance() {
}

SCPlayerInfoMsg::SCPlayerInfoMsg(const SCPlayerInfoMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCPlayerInfoMsg::SharedCtor() {
  _cached_size_ = 0;
  sex_ = 0;
  lvl_ = 0;
  reputationlvl_ = 0;
  govlvl_ = 0;
  jwlvl_ = 0;
  exp_ = 0;
  diamond_ = GOOGLE_LONGLONG(0);
  gold_ = GOOGLE_LONGLONG(0);
  iron_ = GOOGLE_LONGLONG(0);
  tree_ = GOOGLE_LONGLONG(0);
  oil_ = GOOGLE_LONGLONG(0);
  magicstone_ = GOOGLE_LONGLONG(0);
  viplvl_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCPlayerInfoMsg::~SCPlayerInfoMsg() {
  SharedDtor();
}

void SCPlayerInfoMsg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SCPlayerInfoMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCPlayerInfoMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCPlayerInfoMsg_descriptor_;
}

const SCPlayerInfoMsg& SCPlayerInfoMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SC_2eSCPlayerInfoMsg_2eproto();
  return *default_instance_;
}

SCPlayerInfoMsg* SCPlayerInfoMsg::default_instance_ = NULL;

SCPlayerInfoMsg* SCPlayerInfoMsg::New() const {
  return new SCPlayerInfoMsg;
}

void SCPlayerInfoMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sex_ = 0;
    lvl_ = 0;
    reputationlvl_ = 0;
    govlvl_ = 0;
    jwlvl_ = 0;
    exp_ = 0;
    diamond_ = GOOGLE_LONGLONG(0);
    gold_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    iron_ = GOOGLE_LONGLONG(0);
    tree_ = GOOGLE_LONGLONG(0);
    oil_ = GOOGLE_LONGLONG(0);
    magicstone_ = GOOGLE_LONGLONG(0);
    viplvl_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  buildinfos_.Clear();
  boatinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCPlayerInfoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lvl;
        break;
      }

      // optional int32 lvl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reputationLvl;
        break;
      }

      // optional int32 reputationLvl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reputationLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reputationlvl_)));
          set_has_reputationlvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_govLvl;
        break;
      }

      // optional int32 govLvl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_govLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &govlvl_)));
          set_has_govlvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_jwLvl;
        break;
      }

      // optional int32 jwLvl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jwLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jwlvl_)));
          set_has_jwlvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // optional int32 exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_diamond;
        break;
      }

      // optional int64 diamond = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gold;
        break;
      }

      // optional int64 gold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_iron;
        break;
      }

      // optional int64 iron = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iron_)));
          set_has_iron();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_tree;
        break;
      }

      // optional int64 tree = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tree_)));
          set_has_tree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_oil;
        break;
      }

      // optional int64 oil = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oil:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &oil_)));
          set_has_oil();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_magicStone;
        break;
      }

      // optional int64 magicStone = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicStone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &magicstone_)));
          set_has_magicstone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_buildInfos;
        break;
      }

      // repeated .com.empire.msg.BuildInfo buildInfos = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_buildInfos;
        if (input->ExpectTag(114)) goto parse_boatInfos;
        break;
      }

      // repeated .com.empire.msg.BoatInfo boatInfos = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boatInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boatinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_boatInfos;
        if (input->ExpectTag(120)) goto parse_vipLvl;
        break;
      }

      // optional int64 vipLvl = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &viplvl_)));
          set_has_viplvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_name;
        break;
      }

      // optional string name = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCPlayerInfoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sex = 1;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sex(), output);
  }

  // optional int32 lvl = 2;
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lvl(), output);
  }

  // optional int32 reputationLvl = 3;
  if (has_reputationlvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reputationlvl(), output);
  }

  // optional int32 govLvl = 4;
  if (has_govlvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->govlvl(), output);
  }

  // optional int32 jwLvl = 5;
  if (has_jwlvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->jwlvl(), output);
  }

  // optional int32 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exp(), output);
  }

  // optional int64 diamond = 7;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->diamond(), output);
  }

  // optional int64 gold = 8;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->gold(), output);
  }

  // optional int64 iron = 9;
  if (has_iron()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->iron(), output);
  }

  // optional int64 tree = 10;
  if (has_tree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->tree(), output);
  }

  // optional int64 oil = 11;
  if (has_oil()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->oil(), output);
  }

  // optional int64 magicStone = 12;
  if (has_magicstone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->magicstone(), output);
  }

  // repeated .com.empire.msg.BuildInfo buildInfos = 13;
  for (int i = 0; i < this->buildinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->buildinfos(i), output);
  }

  // repeated .com.empire.msg.BoatInfo boatInfos = 14;
  for (int i = 0; i < this->boatinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->boatinfos(i), output);
  }

  // optional int64 vipLvl = 15;
  if (has_viplvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->viplvl(), output);
  }

  // optional string name = 16;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCPlayerInfoMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sex = 1;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sex(), target);
  }

  // optional int32 lvl = 2;
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lvl(), target);
  }

  // optional int32 reputationLvl = 3;
  if (has_reputationlvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reputationlvl(), target);
  }

  // optional int32 govLvl = 4;
  if (has_govlvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->govlvl(), target);
  }

  // optional int32 jwLvl = 5;
  if (has_jwlvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->jwlvl(), target);
  }

  // optional int32 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exp(), target);
  }

  // optional int64 diamond = 7;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->diamond(), target);
  }

  // optional int64 gold = 8;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->gold(), target);
  }

  // optional int64 iron = 9;
  if (has_iron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->iron(), target);
  }

  // optional int64 tree = 10;
  if (has_tree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->tree(), target);
  }

  // optional int64 oil = 11;
  if (has_oil()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->oil(), target);
  }

  // optional int64 magicStone = 12;
  if (has_magicstone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->magicstone(), target);
  }

  // repeated .com.empire.msg.BuildInfo buildInfos = 13;
  for (int i = 0; i < this->buildinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->buildinfos(i), target);
  }

  // repeated .com.empire.msg.BoatInfo boatInfos = 14;
  for (int i = 0; i < this->boatinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->boatinfos(i), target);
  }

  // optional int64 vipLvl = 15;
  if (has_viplvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->viplvl(), target);
  }

  // optional string name = 16;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCPlayerInfoMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sex = 1;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 lvl = 2;
    if (has_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvl());
    }

    // optional int32 reputationLvl = 3;
    if (has_reputationlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reputationlvl());
    }

    // optional int32 govLvl = 4;
    if (has_govlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->govlvl());
    }

    // optional int32 jwLvl = 5;
    if (has_jwlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jwlvl());
    }

    // optional int32 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int64 diamond = 7;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diamond());
    }

    // optional int64 gold = 8;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 iron = 9;
    if (has_iron()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iron());
    }

    // optional int64 tree = 10;
    if (has_tree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tree());
    }

    // optional int64 oil = 11;
    if (has_oil()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->oil());
    }

    // optional int64 magicStone = 12;
    if (has_magicstone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->magicstone());
    }

    // optional int64 vipLvl = 15;
    if (has_viplvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->viplvl());
    }

    // optional string name = 16;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .com.empire.msg.BuildInfo buildInfos = 13;
  total_size += 1 * this->buildinfos_size();
  for (int i = 0; i < this->buildinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildinfos(i));
  }

  // repeated .com.empire.msg.BoatInfo boatInfos = 14;
  total_size += 1 * this->boatinfos_size();
  for (int i = 0; i < this->boatinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boatinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCPlayerInfoMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCPlayerInfoMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCPlayerInfoMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCPlayerInfoMsg::MergeFrom(const SCPlayerInfoMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildinfos_.MergeFrom(from.buildinfos_);
  boatinfos_.MergeFrom(from.boatinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
    if (from.has_reputationlvl()) {
      set_reputationlvl(from.reputationlvl());
    }
    if (from.has_govlvl()) {
      set_govlvl(from.govlvl());
    }
    if (from.has_jwlvl()) {
      set_jwlvl(from.jwlvl());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_iron()) {
      set_iron(from.iron());
    }
    if (from.has_tree()) {
      set_tree(from.tree());
    }
    if (from.has_oil()) {
      set_oil(from.oil());
    }
    if (from.has_magicstone()) {
      set_magicstone(from.magicstone());
    }
    if (from.has_viplvl()) {
      set_viplvl(from.viplvl());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCPlayerInfoMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCPlayerInfoMsg::CopyFrom(const SCPlayerInfoMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCPlayerInfoMsg::IsInitialized() const {

  return true;
}

void SCPlayerInfoMsg::Swap(SCPlayerInfoMsg* other) {
  if (other != this) {
    std::swap(sex_, other->sex_);
    std::swap(lvl_, other->lvl_);
    std::swap(reputationlvl_, other->reputationlvl_);
    std::swap(govlvl_, other->govlvl_);
    std::swap(jwlvl_, other->jwlvl_);
    std::swap(exp_, other->exp_);
    std::swap(diamond_, other->diamond_);
    std::swap(gold_, other->gold_);
    std::swap(iron_, other->iron_);
    std::swap(tree_, other->tree_);
    std::swap(oil_, other->oil_);
    std::swap(magicstone_, other->magicstone_);
    buildinfos_.Swap(&other->buildinfos_);
    boatinfos_.Swap(&other->boatinfos_);
    std::swap(viplvl_, other->viplvl_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCPlayerInfoMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCPlayerInfoMsg_descriptor_;
  metadata.reflection = SCPlayerInfoMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sc
}  // namespace msg
}  // namespace empire
}  // namespace com

// @@protoc_insertion_point(global_scope)
