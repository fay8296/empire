// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build.sc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "build.sc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace empire {
namespace msg {
namespace sc {

namespace {

const ::google::protobuf::Descriptor* SCSystemInfoMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCSystemInfoMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCStartBuildMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCStartBuildMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCStartProduceMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCStartProduceMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCStartResearchMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCStartResearchMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCStartUpdateMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCStartUpdateMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCResearchInfoMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCResearchInfoMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_build_2esc_2eproto() {
  protobuf_AddDesc_build_2esc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "build.sc.proto");
  GOOGLE_CHECK(file != NULL);
  SCSystemInfoMsg_descriptor_ = file->message_type(0);
  static const int SCSystemInfoMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCSystemInfoMsg, infoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCSystemInfoMsg, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCSystemInfoMsg, error_),
  };
  SCSystemInfoMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCSystemInfoMsg_descriptor_,
      SCSystemInfoMsg::default_instance_,
      SCSystemInfoMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCSystemInfoMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCSystemInfoMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCSystemInfoMsg));
  SCStartBuildMsg_descriptor_ = file->message_type(1);
  static const int SCStartBuildMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCStartBuildMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCStartBuildMsg, lefttime_),
  };
  SCStartBuildMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCStartBuildMsg_descriptor_,
      SCStartBuildMsg::default_instance_,
      SCStartBuildMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCStartBuildMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCStartBuildMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCStartBuildMsg));
  SCStartProduceMsg_descriptor_ = file->message_type(2);
  static const int SCStartProduceMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCStartProduceMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCStartProduceMsg, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCStartProduceMsg, producetmplid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCStartProduceMsg, producecount_),
  };
  SCStartProduceMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCStartProduceMsg_descriptor_,
      SCStartProduceMsg::default_instance_,
      SCStartProduceMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCStartProduceMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCStartProduceMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCStartProduceMsg));
  SCStartResearchMsg_descriptor_ = file->message_type(3);
  static const int SCStartResearchMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCStartResearchMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCStartResearchMsg, researchtmplid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCStartResearchMsg, lefttime_),
  };
  SCStartResearchMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCStartResearchMsg_descriptor_,
      SCStartResearchMsg::default_instance_,
      SCStartResearchMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCStartResearchMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCStartResearchMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCStartResearchMsg));
  SCStartUpdateMsg_descriptor_ = file->message_type(4);
  static const int SCStartUpdateMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCStartUpdateMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCStartUpdateMsg, lefttime_),
  };
  SCStartUpdateMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCStartUpdateMsg_descriptor_,
      SCStartUpdateMsg::default_instance_,
      SCStartUpdateMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCStartUpdateMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCStartUpdateMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCStartUpdateMsg));
  SCResearchInfoMsg_descriptor_ = file->message_type(5);
  static const int SCResearchInfoMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCResearchInfoMsg, researchtmplid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCResearchInfoMsg, lefttime_),
  };
  SCResearchInfoMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCResearchInfoMsg_descriptor_,
      SCResearchInfoMsg::default_instance_,
      SCResearchInfoMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCResearchInfoMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCResearchInfoMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCResearchInfoMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_build_2esc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCSystemInfoMsg_descriptor_, &SCSystemInfoMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCStartBuildMsg_descriptor_, &SCStartBuildMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCStartProduceMsg_descriptor_, &SCStartProduceMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCStartResearchMsg_descriptor_, &SCStartResearchMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCStartUpdateMsg_descriptor_, &SCStartUpdateMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCResearchInfoMsg_descriptor_, &SCResearchInfoMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_build_2esc_2eproto() {
  delete SCSystemInfoMsg::default_instance_;
  delete SCSystemInfoMsg_reflection_;
  delete SCStartBuildMsg::default_instance_;
  delete SCStartBuildMsg_reflection_;
  delete SCStartProduceMsg::default_instance_;
  delete SCStartProduceMsg_reflection_;
  delete SCStartResearchMsg::default_instance_;
  delete SCStartResearchMsg_reflection_;
  delete SCStartUpdateMsg::default_instance_;
  delete SCStartUpdateMsg_reflection_;
  delete SCResearchInfoMsg::default_instance_;
  delete SCResearchInfoMsg_reflection_;
}

void protobuf_AddDesc_build_2esc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::empire::msg::protobuf_AddDesc_struct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016build.sc.proto\022\021com.empire.msg.sc\032\014str"
    "uct.proto\"[\n\017SCSystemInfoMsg\022\016\n\006infoId\030\001"
    " \001(\t\022\016\n\006params\030\002 \003(\t\022(\n\005error\030\003 \001(\0162\031.co"
    "m.empire.msg.ErrorType\"/\n\017SCStartBuildMs"
    "g\022\n\n\002id\030\001 \001(\t\022\020\n\010leftTime\030\002 \001(\005\"^\n\021SCSta"
    "rtProduceMsg\022\n\n\002id\030\001 \001(\t\022\020\n\010leftTime\030\002 \001"
    "(\005\022\025\n\rproduceTmplId\030\003 \001(\t\022\024\n\014produceCoun"
    "t\030\004 \001(\005\"J\n\022SCStartResearchMsg\022\n\n\002id\030\001 \001("
    "\t\022\026\n\016researchTmplId\030\002 \001(\t\022\020\n\010leftTime\030\003 "
    "\001(\005\"0\n\020SCStartUpdateMsg\022\n\n\002id\030\001 \001(\t\022\020\n\010l"
    "eftTime\030\002 \001(\005\"=\n\021SCResearchInfoMsg\022\026\n\016re"
    "searchTmplId\030\001 \001(\t\022\020\n\010leftTime\030\002 \001(\005", 476);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "build.sc.proto", &protobuf_RegisterTypes);
  SCSystemInfoMsg::default_instance_ = new SCSystemInfoMsg();
  SCStartBuildMsg::default_instance_ = new SCStartBuildMsg();
  SCStartProduceMsg::default_instance_ = new SCStartProduceMsg();
  SCStartResearchMsg::default_instance_ = new SCStartResearchMsg();
  SCStartUpdateMsg::default_instance_ = new SCStartUpdateMsg();
  SCResearchInfoMsg::default_instance_ = new SCResearchInfoMsg();
  SCSystemInfoMsg::default_instance_->InitAsDefaultInstance();
  SCStartBuildMsg::default_instance_->InitAsDefaultInstance();
  SCStartProduceMsg::default_instance_->InitAsDefaultInstance();
  SCStartResearchMsg::default_instance_->InitAsDefaultInstance();
  SCStartUpdateMsg::default_instance_->InitAsDefaultInstance();
  SCResearchInfoMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_build_2esc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_build_2esc_2eproto {
  StaticDescriptorInitializer_build_2esc_2eproto() {
    protobuf_AddDesc_build_2esc_2eproto();
  }
} static_descriptor_initializer_build_2esc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SCSystemInfoMsg::kInfoIdFieldNumber;
const int SCSystemInfoMsg::kParamsFieldNumber;
const int SCSystemInfoMsg::kErrorFieldNumber;
#endif  // !_MSC_VER

SCSystemInfoMsg::SCSystemInfoMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCSystemInfoMsg::InitAsDefaultInstance() {
}

SCSystemInfoMsg::SCSystemInfoMsg(const SCSystemInfoMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCSystemInfoMsg::SharedCtor() {
  _cached_size_ = 0;
  infoid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCSystemInfoMsg::~SCSystemInfoMsg() {
  SharedDtor();
}

void SCSystemInfoMsg::SharedDtor() {
  if (infoid_ != &::google::protobuf::internal::kEmptyString) {
    delete infoid_;
  }
  if (this != default_instance_) {
  }
}

void SCSystemInfoMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCSystemInfoMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCSystemInfoMsg_descriptor_;
}

const SCSystemInfoMsg& SCSystemInfoMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2esc_2eproto();
  return *default_instance_;
}

SCSystemInfoMsg* SCSystemInfoMsg::default_instance_ = NULL;

SCSystemInfoMsg* SCSystemInfoMsg::New() const {
  return new SCSystemInfoMsg;
}

void SCSystemInfoMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_infoid()) {
      if (infoid_ != &::google::protobuf::internal::kEmptyString) {
        infoid_->clear();
      }
    }
    error_ = 1;
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCSystemInfoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string infoId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infoid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->infoid().data(), this->infoid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_params;
        break;
      }

      // repeated string params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->params(this->params_size() - 1).data(),
            this->params(this->params_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_params;
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional .com.empire.msg.ErrorType error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::empire::msg::ErrorType_IsValid(value)) {
            set_error(static_cast< ::com::empire::msg::ErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCSystemInfoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string infoId = 1;
  if (has_infoid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->infoid().data(), this->infoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->infoid(), output);
  }

  // repeated string params = 2;
  for (int i = 0; i < this->params_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->params(i).data(), this->params(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->params(i), output);
  }

  // optional .com.empire.msg.ErrorType error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCSystemInfoMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string infoId = 1;
  if (has_infoid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->infoid().data(), this->infoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->infoid(), target);
  }

  // repeated string params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->params(i).data(), this->params(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->params(i), target);
  }

  // optional .com.empire.msg.ErrorType error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCSystemInfoMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string infoId = 1;
    if (has_infoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->infoid());
    }

    // optional .com.empire.msg.ErrorType error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  // repeated string params = 2;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCSystemInfoMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCSystemInfoMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCSystemInfoMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCSystemInfoMsg::MergeFrom(const SCSystemInfoMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_infoid()) {
      set_infoid(from.infoid());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCSystemInfoMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCSystemInfoMsg::CopyFrom(const SCSystemInfoMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCSystemInfoMsg::IsInitialized() const {

  return true;
}

void SCSystemInfoMsg::Swap(SCSystemInfoMsg* other) {
  if (other != this) {
    std::swap(infoid_, other->infoid_);
    params_.Swap(&other->params_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCSystemInfoMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCSystemInfoMsg_descriptor_;
  metadata.reflection = SCSystemInfoMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCStartBuildMsg::kIdFieldNumber;
const int SCStartBuildMsg::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

SCStartBuildMsg::SCStartBuildMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCStartBuildMsg::InitAsDefaultInstance() {
}

SCStartBuildMsg::SCStartBuildMsg(const SCStartBuildMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCStartBuildMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lefttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCStartBuildMsg::~SCStartBuildMsg() {
  SharedDtor();
}

void SCStartBuildMsg::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void SCStartBuildMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCStartBuildMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCStartBuildMsg_descriptor_;
}

const SCStartBuildMsg& SCStartBuildMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2esc_2eproto();
  return *default_instance_;
}

SCStartBuildMsg* SCStartBuildMsg::default_instance_ = NULL;

SCStartBuildMsg* SCStartBuildMsg::New() const {
  return new SCStartBuildMsg;
}

void SCStartBuildMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    lefttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCStartBuildMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leftTime;
        break;
      }

      // optional int32 leftTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCStartBuildMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional int32 leftTime = 2;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lefttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCStartBuildMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 leftTime = 2;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lefttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCStartBuildMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 leftTime = 2;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCStartBuildMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCStartBuildMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCStartBuildMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCStartBuildMsg::MergeFrom(const SCStartBuildMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCStartBuildMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCStartBuildMsg::CopyFrom(const SCStartBuildMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCStartBuildMsg::IsInitialized() const {

  return true;
}

void SCStartBuildMsg::Swap(SCStartBuildMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCStartBuildMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCStartBuildMsg_descriptor_;
  metadata.reflection = SCStartBuildMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCStartProduceMsg::kIdFieldNumber;
const int SCStartProduceMsg::kLeftTimeFieldNumber;
const int SCStartProduceMsg::kProduceTmplIdFieldNumber;
const int SCStartProduceMsg::kProduceCountFieldNumber;
#endif  // !_MSC_VER

SCStartProduceMsg::SCStartProduceMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCStartProduceMsg::InitAsDefaultInstance() {
}

SCStartProduceMsg::SCStartProduceMsg(const SCStartProduceMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCStartProduceMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lefttime_ = 0;
  producetmplid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  producecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCStartProduceMsg::~SCStartProduceMsg() {
  SharedDtor();
}

void SCStartProduceMsg::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (producetmplid_ != &::google::protobuf::internal::kEmptyString) {
    delete producetmplid_;
  }
  if (this != default_instance_) {
  }
}

void SCStartProduceMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCStartProduceMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCStartProduceMsg_descriptor_;
}

const SCStartProduceMsg& SCStartProduceMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2esc_2eproto();
  return *default_instance_;
}

SCStartProduceMsg* SCStartProduceMsg::default_instance_ = NULL;

SCStartProduceMsg* SCStartProduceMsg::New() const {
  return new SCStartProduceMsg;
}

void SCStartProduceMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    lefttime_ = 0;
    if (has_producetmplid()) {
      if (producetmplid_ != &::google::protobuf::internal::kEmptyString) {
        producetmplid_->clear();
      }
    }
    producecount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCStartProduceMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leftTime;
        break;
      }

      // optional int32 leftTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_produceTmplId;
        break;
      }

      // optional string produceTmplId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_produceTmplId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_producetmplid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->producetmplid().data(), this->producetmplid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_produceCount;
        break;
      }

      // optional int32 produceCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_produceCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &producecount_)));
          set_has_producecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCStartProduceMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional int32 leftTime = 2;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lefttime(), output);
  }

  // optional string produceTmplId = 3;
  if (has_producetmplid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->producetmplid().data(), this->producetmplid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->producetmplid(), output);
  }

  // optional int32 produceCount = 4;
  if (has_producecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->producecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCStartProduceMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 leftTime = 2;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lefttime(), target);
  }

  // optional string produceTmplId = 3;
  if (has_producetmplid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->producetmplid().data(), this->producetmplid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->producetmplid(), target);
  }

  // optional int32 produceCount = 4;
  if (has_producecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->producecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCStartProduceMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 leftTime = 2;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

    // optional string produceTmplId = 3;
    if (has_producetmplid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->producetmplid());
    }

    // optional int32 produceCount = 4;
    if (has_producecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->producecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCStartProduceMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCStartProduceMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCStartProduceMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCStartProduceMsg::MergeFrom(const SCStartProduceMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
    if (from.has_producetmplid()) {
      set_producetmplid(from.producetmplid());
    }
    if (from.has_producecount()) {
      set_producecount(from.producecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCStartProduceMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCStartProduceMsg::CopyFrom(const SCStartProduceMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCStartProduceMsg::IsInitialized() const {

  return true;
}

void SCStartProduceMsg::Swap(SCStartProduceMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(producetmplid_, other->producetmplid_);
    std::swap(producecount_, other->producecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCStartProduceMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCStartProduceMsg_descriptor_;
  metadata.reflection = SCStartProduceMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCStartResearchMsg::kIdFieldNumber;
const int SCStartResearchMsg::kResearchTmplIdFieldNumber;
const int SCStartResearchMsg::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

SCStartResearchMsg::SCStartResearchMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCStartResearchMsg::InitAsDefaultInstance() {
}

SCStartResearchMsg::SCStartResearchMsg(const SCStartResearchMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCStartResearchMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  researchtmplid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lefttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCStartResearchMsg::~SCStartResearchMsg() {
  SharedDtor();
}

void SCStartResearchMsg::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (researchtmplid_ != &::google::protobuf::internal::kEmptyString) {
    delete researchtmplid_;
  }
  if (this != default_instance_) {
  }
}

void SCStartResearchMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCStartResearchMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCStartResearchMsg_descriptor_;
}

const SCStartResearchMsg& SCStartResearchMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2esc_2eproto();
  return *default_instance_;
}

SCStartResearchMsg* SCStartResearchMsg::default_instance_ = NULL;

SCStartResearchMsg* SCStartResearchMsg::New() const {
  return new SCStartResearchMsg;
}

void SCStartResearchMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_researchtmplid()) {
      if (researchtmplid_ != &::google::protobuf::internal::kEmptyString) {
        researchtmplid_->clear();
      }
    }
    lefttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCStartResearchMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_researchTmplId;
        break;
      }

      // optional string researchTmplId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_researchTmplId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_researchtmplid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->researchtmplid().data(), this->researchtmplid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leftTime;
        break;
      }

      // optional int32 leftTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCStartResearchMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string researchTmplId = 2;
  if (has_researchtmplid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->researchtmplid().data(), this->researchtmplid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->researchtmplid(), output);
  }

  // optional int32 leftTime = 3;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lefttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCStartResearchMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string researchTmplId = 2;
  if (has_researchtmplid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->researchtmplid().data(), this->researchtmplid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->researchtmplid(), target);
  }

  // optional int32 leftTime = 3;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lefttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCStartResearchMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string researchTmplId = 2;
    if (has_researchtmplid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->researchtmplid());
    }

    // optional int32 leftTime = 3;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCStartResearchMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCStartResearchMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCStartResearchMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCStartResearchMsg::MergeFrom(const SCStartResearchMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_researchtmplid()) {
      set_researchtmplid(from.researchtmplid());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCStartResearchMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCStartResearchMsg::CopyFrom(const SCStartResearchMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCStartResearchMsg::IsInitialized() const {

  return true;
}

void SCStartResearchMsg::Swap(SCStartResearchMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(researchtmplid_, other->researchtmplid_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCStartResearchMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCStartResearchMsg_descriptor_;
  metadata.reflection = SCStartResearchMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCStartUpdateMsg::kIdFieldNumber;
const int SCStartUpdateMsg::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

SCStartUpdateMsg::SCStartUpdateMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCStartUpdateMsg::InitAsDefaultInstance() {
}

SCStartUpdateMsg::SCStartUpdateMsg(const SCStartUpdateMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCStartUpdateMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lefttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCStartUpdateMsg::~SCStartUpdateMsg() {
  SharedDtor();
}

void SCStartUpdateMsg::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void SCStartUpdateMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCStartUpdateMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCStartUpdateMsg_descriptor_;
}

const SCStartUpdateMsg& SCStartUpdateMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2esc_2eproto();
  return *default_instance_;
}

SCStartUpdateMsg* SCStartUpdateMsg::default_instance_ = NULL;

SCStartUpdateMsg* SCStartUpdateMsg::New() const {
  return new SCStartUpdateMsg;
}

void SCStartUpdateMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    lefttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCStartUpdateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leftTime;
        break;
      }

      // optional int32 leftTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCStartUpdateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional int32 leftTime = 2;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lefttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCStartUpdateMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 leftTime = 2;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lefttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCStartUpdateMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 leftTime = 2;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCStartUpdateMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCStartUpdateMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCStartUpdateMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCStartUpdateMsg::MergeFrom(const SCStartUpdateMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCStartUpdateMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCStartUpdateMsg::CopyFrom(const SCStartUpdateMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCStartUpdateMsg::IsInitialized() const {

  return true;
}

void SCStartUpdateMsg::Swap(SCStartUpdateMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCStartUpdateMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCStartUpdateMsg_descriptor_;
  metadata.reflection = SCStartUpdateMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCResearchInfoMsg::kResearchTmplIdFieldNumber;
const int SCResearchInfoMsg::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

SCResearchInfoMsg::SCResearchInfoMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCResearchInfoMsg::InitAsDefaultInstance() {
}

SCResearchInfoMsg::SCResearchInfoMsg(const SCResearchInfoMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCResearchInfoMsg::SharedCtor() {
  _cached_size_ = 0;
  researchtmplid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lefttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCResearchInfoMsg::~SCResearchInfoMsg() {
  SharedDtor();
}

void SCResearchInfoMsg::SharedDtor() {
  if (researchtmplid_ != &::google::protobuf::internal::kEmptyString) {
    delete researchtmplid_;
  }
  if (this != default_instance_) {
  }
}

void SCResearchInfoMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCResearchInfoMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCResearchInfoMsg_descriptor_;
}

const SCResearchInfoMsg& SCResearchInfoMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_build_2esc_2eproto();
  return *default_instance_;
}

SCResearchInfoMsg* SCResearchInfoMsg::default_instance_ = NULL;

SCResearchInfoMsg* SCResearchInfoMsg::New() const {
  return new SCResearchInfoMsg;
}

void SCResearchInfoMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_researchtmplid()) {
      if (researchtmplid_ != &::google::protobuf::internal::kEmptyString) {
        researchtmplid_->clear();
      }
    }
    lefttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCResearchInfoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string researchTmplId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_researchtmplid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->researchtmplid().data(), this->researchtmplid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leftTime;
        break;
      }

      // optional int32 leftTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCResearchInfoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string researchTmplId = 1;
  if (has_researchtmplid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->researchtmplid().data(), this->researchtmplid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->researchtmplid(), output);
  }

  // optional int32 leftTime = 2;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lefttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCResearchInfoMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string researchTmplId = 1;
  if (has_researchtmplid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->researchtmplid().data(), this->researchtmplid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->researchtmplid(), target);
  }

  // optional int32 leftTime = 2;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lefttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCResearchInfoMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string researchTmplId = 1;
    if (has_researchtmplid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->researchtmplid());
    }

    // optional int32 leftTime = 2;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCResearchInfoMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCResearchInfoMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCResearchInfoMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCResearchInfoMsg::MergeFrom(const SCResearchInfoMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_researchtmplid()) {
      set_researchtmplid(from.researchtmplid());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCResearchInfoMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCResearchInfoMsg::CopyFrom(const SCResearchInfoMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCResearchInfoMsg::IsInitialized() const {

  return true;
}

void SCResearchInfoMsg::Swap(SCResearchInfoMsg* other) {
  if (other != this) {
    std::swap(researchtmplid_, other->researchtmplid_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCResearchInfoMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCResearchInfoMsg_descriptor_;
  metadata.reflection = SCResearchInfoMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sc
}  // namespace msg
}  // namespace empire
}  // namespace com

// @@protoc_insertion_point(global_scope)
