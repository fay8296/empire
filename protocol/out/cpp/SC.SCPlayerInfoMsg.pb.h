// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SC.SCPlayerInfoMsg.proto

#ifndef PROTOBUF_SC_2eSCPlayerInfoMsg_2eproto__INCLUDED
#define PROTOBUF_SC_2eSCPlayerInfoMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "struct.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace empire {
namespace msg {
namespace auto {
namespace sc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SC_2eSCPlayerInfoMsg_2eproto();
void protobuf_AssignDesc_SC_2eSCPlayerInfoMsg_2eproto();
void protobuf_ShutdownFile_SC_2eSCPlayerInfoMsg_2eproto();

class SCPlayerInfoMsg;

// ===================================================================

class SCPlayerInfoMsg : public ::google::protobuf::Message {
 public:
  SCPlayerInfoMsg();
  virtual ~SCPlayerInfoMsg();

  SCPlayerInfoMsg(const SCPlayerInfoMsg& from);

  inline SCPlayerInfoMsg& operator=(const SCPlayerInfoMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCPlayerInfoMsg& default_instance();

  void Swap(SCPlayerInfoMsg* other);

  // implements Message ----------------------------------------------

  SCPlayerInfoMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCPlayerInfoMsg& from);
  void MergeFrom(const SCPlayerInfoMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sex = 1;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 1;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 lvl = 2;
  inline bool has_lvl() const;
  inline void clear_lvl();
  static const int kLvlFieldNumber = 2;
  inline ::google::protobuf::int32 lvl() const;
  inline void set_lvl(::google::protobuf::int32 value);

  // optional int32 reputationLvl = 3;
  inline bool has_reputationlvl() const;
  inline void clear_reputationlvl();
  static const int kReputationLvlFieldNumber = 3;
  inline ::google::protobuf::int32 reputationlvl() const;
  inline void set_reputationlvl(::google::protobuf::int32 value);

  // optional int32 govLvl = 4;
  inline bool has_govlvl() const;
  inline void clear_govlvl();
  static const int kGovLvlFieldNumber = 4;
  inline ::google::protobuf::int32 govlvl() const;
  inline void set_govlvl(::google::protobuf::int32 value);

  // optional int32 jwLvl = 5;
  inline bool has_jwlvl() const;
  inline void clear_jwlvl();
  static const int kJwLvlFieldNumber = 5;
  inline ::google::protobuf::int32 jwlvl() const;
  inline void set_jwlvl(::google::protobuf::int32 value);

  // optional int32 exp = 6;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 6;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int64 diamond = 7;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 7;
  inline ::google::protobuf::int64 diamond() const;
  inline void set_diamond(::google::protobuf::int64 value);

  // optional int64 gold = 8;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 8;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int64 iron = 9;
  inline bool has_iron() const;
  inline void clear_iron();
  static const int kIronFieldNumber = 9;
  inline ::google::protobuf::int64 iron() const;
  inline void set_iron(::google::protobuf::int64 value);

  // optional int64 tree = 10;
  inline bool has_tree() const;
  inline void clear_tree();
  static const int kTreeFieldNumber = 10;
  inline ::google::protobuf::int64 tree() const;
  inline void set_tree(::google::protobuf::int64 value);

  // optional int64 oil = 11;
  inline bool has_oil() const;
  inline void clear_oil();
  static const int kOilFieldNumber = 11;
  inline ::google::protobuf::int64 oil() const;
  inline void set_oil(::google::protobuf::int64 value);

  // optional int64 magicStone = 12;
  inline bool has_magicstone() const;
  inline void clear_magicstone();
  static const int kMagicStoneFieldNumber = 12;
  inline ::google::protobuf::int64 magicstone() const;
  inline void set_magicstone(::google::protobuf::int64 value);

  // repeated .com.empire.msg.auto.BuildInfo buildInfos = 13;
  inline int buildinfos_size() const;
  inline void clear_buildinfos();
  static const int kBuildInfosFieldNumber = 13;
  inline const ::com::empire::msg::auto::BuildInfo& buildinfos(int index) const;
  inline ::com::empire::msg::auto::BuildInfo* mutable_buildinfos(int index);
  inline ::com::empire::msg::auto::BuildInfo* add_buildinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::com::empire::msg::auto::BuildInfo >&
      buildinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::empire::msg::auto::BuildInfo >*
      mutable_buildinfos();

  // repeated .com.empire.msg.auto.BoatInfo boatInfos = 14;
  inline int boatinfos_size() const;
  inline void clear_boatinfos();
  static const int kBoatInfosFieldNumber = 14;
  inline const ::com::empire::msg::auto::BoatInfo& boatinfos(int index) const;
  inline ::com::empire::msg::auto::BoatInfo* mutable_boatinfos(int index);
  inline ::com::empire::msg::auto::BoatInfo* add_boatinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::com::empire::msg::auto::BoatInfo >&
      boatinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::empire::msg::auto::BoatInfo >*
      mutable_boatinfos();

  // optional int64 vipLvl = 15;
  inline bool has_viplvl() const;
  inline void clear_viplvl();
  static const int kVipLvlFieldNumber = 15;
  inline ::google::protobuf::int64 viplvl() const;
  inline void set_viplvl(::google::protobuf::int64 value);

  // optional string name = 16;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 16;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:com.empire.msg.auto.sc.SCPlayerInfoMsg)
 private:
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_lvl();
  inline void clear_has_lvl();
  inline void set_has_reputationlvl();
  inline void clear_has_reputationlvl();
  inline void set_has_govlvl();
  inline void clear_has_govlvl();
  inline void set_has_jwlvl();
  inline void clear_has_jwlvl();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_iron();
  inline void clear_has_iron();
  inline void set_has_tree();
  inline void clear_has_tree();
  inline void set_has_oil();
  inline void clear_has_oil();
  inline void set_has_magicstone();
  inline void clear_has_magicstone();
  inline void set_has_viplvl();
  inline void clear_has_viplvl();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 lvl_;
  ::google::protobuf::int32 reputationlvl_;
  ::google::protobuf::int32 govlvl_;
  ::google::protobuf::int32 jwlvl_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int64 diamond_;
  ::google::protobuf::int64 gold_;
  ::google::protobuf::int64 iron_;
  ::google::protobuf::int64 tree_;
  ::google::protobuf::int64 oil_;
  ::google::protobuf::int64 magicstone_;
  ::google::protobuf::RepeatedPtrField< ::com::empire::msg::auto::BuildInfo > buildinfos_;
  ::google::protobuf::RepeatedPtrField< ::com::empire::msg::auto::BoatInfo > boatinfos_;
  ::google::protobuf::int64 viplvl_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_SC_2eSCPlayerInfoMsg_2eproto();
  friend void protobuf_AssignDesc_SC_2eSCPlayerInfoMsg_2eproto();
  friend void protobuf_ShutdownFile_SC_2eSCPlayerInfoMsg_2eproto();

  void InitAsDefaultInstance();
  static SCPlayerInfoMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// SCPlayerInfoMsg

// optional int32 sex = 1;
inline bool SCPlayerInfoMsg::has_sex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCPlayerInfoMsg::set_has_sex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCPlayerInfoMsg::clear_has_sex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCPlayerInfoMsg::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 SCPlayerInfoMsg::sex() const {
  return sex_;
}
inline void SCPlayerInfoMsg::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 lvl = 2;
inline bool SCPlayerInfoMsg::has_lvl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCPlayerInfoMsg::set_has_lvl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCPlayerInfoMsg::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCPlayerInfoMsg::clear_lvl() {
  lvl_ = 0;
  clear_has_lvl();
}
inline ::google::protobuf::int32 SCPlayerInfoMsg::lvl() const {
  return lvl_;
}
inline void SCPlayerInfoMsg::set_lvl(::google::protobuf::int32 value) {
  set_has_lvl();
  lvl_ = value;
}

// optional int32 reputationLvl = 3;
inline bool SCPlayerInfoMsg::has_reputationlvl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCPlayerInfoMsg::set_has_reputationlvl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCPlayerInfoMsg::clear_has_reputationlvl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCPlayerInfoMsg::clear_reputationlvl() {
  reputationlvl_ = 0;
  clear_has_reputationlvl();
}
inline ::google::protobuf::int32 SCPlayerInfoMsg::reputationlvl() const {
  return reputationlvl_;
}
inline void SCPlayerInfoMsg::set_reputationlvl(::google::protobuf::int32 value) {
  set_has_reputationlvl();
  reputationlvl_ = value;
}

// optional int32 govLvl = 4;
inline bool SCPlayerInfoMsg::has_govlvl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SCPlayerInfoMsg::set_has_govlvl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SCPlayerInfoMsg::clear_has_govlvl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SCPlayerInfoMsg::clear_govlvl() {
  govlvl_ = 0;
  clear_has_govlvl();
}
inline ::google::protobuf::int32 SCPlayerInfoMsg::govlvl() const {
  return govlvl_;
}
inline void SCPlayerInfoMsg::set_govlvl(::google::protobuf::int32 value) {
  set_has_govlvl();
  govlvl_ = value;
}

// optional int32 jwLvl = 5;
inline bool SCPlayerInfoMsg::has_jwlvl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SCPlayerInfoMsg::set_has_jwlvl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SCPlayerInfoMsg::clear_has_jwlvl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SCPlayerInfoMsg::clear_jwlvl() {
  jwlvl_ = 0;
  clear_has_jwlvl();
}
inline ::google::protobuf::int32 SCPlayerInfoMsg::jwlvl() const {
  return jwlvl_;
}
inline void SCPlayerInfoMsg::set_jwlvl(::google::protobuf::int32 value) {
  set_has_jwlvl();
  jwlvl_ = value;
}

// optional int32 exp = 6;
inline bool SCPlayerInfoMsg::has_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SCPlayerInfoMsg::set_has_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SCPlayerInfoMsg::clear_has_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SCPlayerInfoMsg::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 SCPlayerInfoMsg::exp() const {
  return exp_;
}
inline void SCPlayerInfoMsg::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int64 diamond = 7;
inline bool SCPlayerInfoMsg::has_diamond() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SCPlayerInfoMsg::set_has_diamond() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SCPlayerInfoMsg::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SCPlayerInfoMsg::clear_diamond() {
  diamond_ = GOOGLE_LONGLONG(0);
  clear_has_diamond();
}
inline ::google::protobuf::int64 SCPlayerInfoMsg::diamond() const {
  return diamond_;
}
inline void SCPlayerInfoMsg::set_diamond(::google::protobuf::int64 value) {
  set_has_diamond();
  diamond_ = value;
}

// optional int64 gold = 8;
inline bool SCPlayerInfoMsg::has_gold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SCPlayerInfoMsg::set_has_gold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SCPlayerInfoMsg::clear_has_gold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SCPlayerInfoMsg::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 SCPlayerInfoMsg::gold() const {
  return gold_;
}
inline void SCPlayerInfoMsg::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int64 iron = 9;
inline bool SCPlayerInfoMsg::has_iron() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SCPlayerInfoMsg::set_has_iron() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SCPlayerInfoMsg::clear_has_iron() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SCPlayerInfoMsg::clear_iron() {
  iron_ = GOOGLE_LONGLONG(0);
  clear_has_iron();
}
inline ::google::protobuf::int64 SCPlayerInfoMsg::iron() const {
  return iron_;
}
inline void SCPlayerInfoMsg::set_iron(::google::protobuf::int64 value) {
  set_has_iron();
  iron_ = value;
}

// optional int64 tree = 10;
inline bool SCPlayerInfoMsg::has_tree() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SCPlayerInfoMsg::set_has_tree() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SCPlayerInfoMsg::clear_has_tree() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SCPlayerInfoMsg::clear_tree() {
  tree_ = GOOGLE_LONGLONG(0);
  clear_has_tree();
}
inline ::google::protobuf::int64 SCPlayerInfoMsg::tree() const {
  return tree_;
}
inline void SCPlayerInfoMsg::set_tree(::google::protobuf::int64 value) {
  set_has_tree();
  tree_ = value;
}

// optional int64 oil = 11;
inline bool SCPlayerInfoMsg::has_oil() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SCPlayerInfoMsg::set_has_oil() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SCPlayerInfoMsg::clear_has_oil() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SCPlayerInfoMsg::clear_oil() {
  oil_ = GOOGLE_LONGLONG(0);
  clear_has_oil();
}
inline ::google::protobuf::int64 SCPlayerInfoMsg::oil() const {
  return oil_;
}
inline void SCPlayerInfoMsg::set_oil(::google::protobuf::int64 value) {
  set_has_oil();
  oil_ = value;
}

// optional int64 magicStone = 12;
inline bool SCPlayerInfoMsg::has_magicstone() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SCPlayerInfoMsg::set_has_magicstone() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SCPlayerInfoMsg::clear_has_magicstone() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SCPlayerInfoMsg::clear_magicstone() {
  magicstone_ = GOOGLE_LONGLONG(0);
  clear_has_magicstone();
}
inline ::google::protobuf::int64 SCPlayerInfoMsg::magicstone() const {
  return magicstone_;
}
inline void SCPlayerInfoMsg::set_magicstone(::google::protobuf::int64 value) {
  set_has_magicstone();
  magicstone_ = value;
}

// repeated .com.empire.msg.auto.BuildInfo buildInfos = 13;
inline int SCPlayerInfoMsg::buildinfos_size() const {
  return buildinfos_.size();
}
inline void SCPlayerInfoMsg::clear_buildinfos() {
  buildinfos_.Clear();
}
inline const ::com::empire::msg::auto::BuildInfo& SCPlayerInfoMsg::buildinfos(int index) const {
  return buildinfos_.Get(index);
}
inline ::com::empire::msg::auto::BuildInfo* SCPlayerInfoMsg::mutable_buildinfos(int index) {
  return buildinfos_.Mutable(index);
}
inline ::com::empire::msg::auto::BuildInfo* SCPlayerInfoMsg::add_buildinfos() {
  return buildinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::empire::msg::auto::BuildInfo >&
SCPlayerInfoMsg::buildinfos() const {
  return buildinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::empire::msg::auto::BuildInfo >*
SCPlayerInfoMsg::mutable_buildinfos() {
  return &buildinfos_;
}

// repeated .com.empire.msg.auto.BoatInfo boatInfos = 14;
inline int SCPlayerInfoMsg::boatinfos_size() const {
  return boatinfos_.size();
}
inline void SCPlayerInfoMsg::clear_boatinfos() {
  boatinfos_.Clear();
}
inline const ::com::empire::msg::auto::BoatInfo& SCPlayerInfoMsg::boatinfos(int index) const {
  return boatinfos_.Get(index);
}
inline ::com::empire::msg::auto::BoatInfo* SCPlayerInfoMsg::mutable_boatinfos(int index) {
  return boatinfos_.Mutable(index);
}
inline ::com::empire::msg::auto::BoatInfo* SCPlayerInfoMsg::add_boatinfos() {
  return boatinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::empire::msg::auto::BoatInfo >&
SCPlayerInfoMsg::boatinfos() const {
  return boatinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::empire::msg::auto::BoatInfo >*
SCPlayerInfoMsg::mutable_boatinfos() {
  return &boatinfos_;
}

// optional int64 vipLvl = 15;
inline bool SCPlayerInfoMsg::has_viplvl() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SCPlayerInfoMsg::set_has_viplvl() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SCPlayerInfoMsg::clear_has_viplvl() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SCPlayerInfoMsg::clear_viplvl() {
  viplvl_ = GOOGLE_LONGLONG(0);
  clear_has_viplvl();
}
inline ::google::protobuf::int64 SCPlayerInfoMsg::viplvl() const {
  return viplvl_;
}
inline void SCPlayerInfoMsg::set_viplvl(::google::protobuf::int64 value) {
  set_has_viplvl();
  viplvl_ = value;
}

// optional string name = 16;
inline bool SCPlayerInfoMsg::has_name() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SCPlayerInfoMsg::set_has_name() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SCPlayerInfoMsg::clear_has_name() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SCPlayerInfoMsg::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SCPlayerInfoMsg::name() const {
  return *name_;
}
inline void SCPlayerInfoMsg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SCPlayerInfoMsg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SCPlayerInfoMsg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCPlayerInfoMsg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SCPlayerInfoMsg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCPlayerInfoMsg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sc
}  // namespace auto
}  // namespace msg
}  // namespace empire
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SC_2eSCPlayerInfoMsg_2eproto__INCLUDED
