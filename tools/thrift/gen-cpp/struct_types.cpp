/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "struct_types.h"

#include <algorithm>



int _kMallItemStateValues[] = {
  MallItemState::SELL,
  MallItemState::UNSELL
};
const char* _kMallItemStateNames[] = {
  "SELL",
  "UNSELL"
};
const std::map<int, const char*> _MallItemState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kMallItemStateValues, _kMallItemStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* MallItem::ascii_fingerprint = "47214729BE84032DE2910D6CE3394304";
const uint8_t MallItem::binary_fingerprint[16] = {0x47,0x21,0x47,0x29,0xBE,0x84,0x03,0x2D,0xE2,0x91,0x0D,0x6C,0xE3,0x39,0x43,0x04};

uint32_t MallItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->itemId);
          this->__isset.itemId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->category);
          this->__isset.category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->itemName);
          this->__isset.itemName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->currency);
          this->__isset.currency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isLimit);
          this->__isset.isLimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->openTime);
          this->__isset.openTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->names.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->names.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->names[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->langId);
          this->__isset.langId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          this->state = (MallItemState::type)ecast5;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->changedPoses.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _ktype7;
            ::apache::thrift::protocol::TType _vtype8;
            xfer += iprot->readMapBegin(_ktype7, _vtype8, _size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              int8_t _key11;
              xfer += iprot->readByte(_key11);
              int8_t& _val12 = this->changedPoses[_key11];
              xfer += iprot->readByte(_val12);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.changedPoses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MallItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MallItem");

  xfer += oprot->writeFieldBegin("itemId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->itemId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("category", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->category);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("itemName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->itemName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currency", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->currency);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isLimit", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->isLimit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("openTime", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->openTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("names", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->names.size()));
    std::vector<std::string> ::const_iterator _iter13;
    for (_iter13 = this->names.begin(); _iter13 != this->names.end(); ++_iter13)
    {
      xfer += oprot->writeString((*_iter13));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("langId", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->langId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("changedPoses", ::apache::thrift::protocol::T_MAP, 10);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_BYTE, ::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->changedPoses.size()));
    std::map<int8_t, int8_t> ::const_iterator _iter14;
    for (_iter14 = this->changedPoses.begin(); _iter14 != this->changedPoses.end(); ++_iter14)
    {
      xfer += oprot->writeByte(_iter14->first);
      xfer += oprot->writeByte(_iter14->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MallItem &a, MallItem &b) {
  using ::std::swap;
  swap(a.itemId, b.itemId);
  swap(a.category, b.category);
  swap(a.itemName, b.itemName);
  swap(a.currency, b.currency);
  swap(a.isLimit, b.isLimit);
  swap(a.openTime, b.openTime);
  swap(a.names, b.names);
  swap(a.langId, b.langId);
  swap(a.state, b.state);
  swap(a.changedPoses, b.changedPoses);
  swap(a.__isset, b.__isset);
}


