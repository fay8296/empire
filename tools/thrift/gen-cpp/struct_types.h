/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef struct_TYPES_H
#define struct_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





struct MallItemState {
  enum type {
    SELL = 0,
    UNSELL = 1
  };
};

extern const std::map<int, const char*> _MallItemState_VALUES_TO_NAMES;

typedef struct _MallItem__isset {
  _MallItem__isset() : itemId(false), category(false), itemName(false), currency(false), isLimit(false), openTime(false), names(false), langId(false), state(false), changedPoses(false) {}
  bool itemId;
  bool category;
  bool itemName;
  bool currency;
  bool isLimit;
  bool openTime;
  bool names;
  bool langId;
  bool state;
  bool changedPoses;
} _MallItem__isset;

class MallItem {
 public:

  static const char* ascii_fingerprint; // = "47214729BE84032DE2910D6CE3394304";
  static const uint8_t binary_fingerprint[16]; // = {0x47,0x21,0x47,0x29,0xBE,0x84,0x03,0x2D,0xE2,0x91,0x0D,0x6C,0xE3,0x39,0x43,0x04};

  MallItem() : itemId(0), category(0), itemName(), currency(0), isLimit(0), openTime(0), langId(0), state((MallItemState::type)0) {
  }

  virtual ~MallItem() throw() {}

  int32_t itemId;
  int8_t category;
  std::string itemName;
  double currency;
  bool isLimit;
  int64_t openTime;
  std::vector<std::string>  names;
  int16_t langId;
  MallItemState::type state;
  std::map<int8_t, int8_t>  changedPoses;

  _MallItem__isset __isset;

  void __set_itemId(const int32_t val) {
    itemId = val;
  }

  void __set_category(const int8_t val) {
    category = val;
  }

  void __set_itemName(const std::string& val) {
    itemName = val;
  }

  void __set_currency(const double val) {
    currency = val;
  }

  void __set_isLimit(const bool val) {
    isLimit = val;
  }

  void __set_openTime(const int64_t val) {
    openTime = val;
  }

  void __set_names(const std::vector<std::string> & val) {
    names = val;
  }

  void __set_langId(const int16_t val) {
    langId = val;
  }

  void __set_state(const MallItemState::type val) {
    state = val;
  }

  void __set_changedPoses(const std::map<int8_t, int8_t> & val) {
    changedPoses = val;
  }

  bool operator == (const MallItem & rhs) const
  {
    if (!(itemId == rhs.itemId))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(itemName == rhs.itemName))
      return false;
    if (!(currency == rhs.currency))
      return false;
    if (!(isLimit == rhs.isLimit))
      return false;
    if (!(openTime == rhs.openTime))
      return false;
    if (!(names == rhs.names))
      return false;
    if (!(langId == rhs.langId))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(changedPoses == rhs.changedPoses))
      return false;
    return true;
  }
  bool operator != (const MallItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MallItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MallItem &a, MallItem &b);



#endif
