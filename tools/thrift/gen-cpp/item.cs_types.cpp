/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "item.cs_types.h"

#include <algorithm>



const char* CSBuyItemMsg::ascii_fingerprint = "029F94599CC2CEFF135A7F05D0E04888";
const uint8_t CSBuyItemMsg::binary_fingerprint[16] = {0x02,0x9F,0x94,0x59,0x9C,0xC2,0xCE,0xFF,0x13,0x5A,0x7F,0x05,0xD0,0xE0,0x48,0x88};

uint32_t CSBuyItemMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->partIndex);
          this->__isset.partIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inputIndex);
          this->__isset.inputIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->inputType);
          this->__isset.inputType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->keyResult);
          this->__isset.keyResult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->calMarkTag);
          this->__isset.calMarkTag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CSBuyItemMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CSBuyItemMsg");

  xfer += oprot->writeFieldBegin("partIndex", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->partIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inputIndex", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->inputIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inputType", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->inputType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keyResult", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->keyResult);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("calMarkTag", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->calMarkTag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CSBuyItemMsg &a, CSBuyItemMsg &b) {
  using ::std::swap;
  swap(a.partIndex, b.partIndex);
  swap(a.inputIndex, b.inputIndex);
  swap(a.inputType, b.inputType);
  swap(a.keyResult, b.keyResult);
  swap(a.calMarkTag, b.calMarkTag);
  swap(a.__isset, b.__isset);
}


