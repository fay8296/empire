/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef item.cs_TYPES_H
#define item.cs_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _CSBuyItemMsg__isset {
  _CSBuyItemMsg__isset() : partIndex(false), inputIndex(false), inputType(false), keyResult(false), calMarkTag(false) {}
  bool partIndex;
  bool inputIndex;
  bool inputType;
  bool keyResult;
  bool calMarkTag;
} _CSBuyItemMsg__isset;

class CSBuyItemMsg {
 public:

  static const char* ascii_fingerprint; // = "029F94599CC2CEFF135A7F05D0E04888";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0x9F,0x94,0x59,0x9C,0xC2,0xCE,0xFF,0x13,0x5A,0x7F,0x05,0xD0,0xE0,0x48,0x88};

  CSBuyItemMsg() : partIndex(0), inputIndex(0), inputType(0), keyResult(0), calMarkTag(0) {
  }

  virtual ~CSBuyItemMsg() throw() {}

  int8_t partIndex;
  int8_t inputIndex;
  int8_t inputType;
  int8_t keyResult;
  int8_t calMarkTag;

  _CSBuyItemMsg__isset __isset;

  void __set_partIndex(const int8_t val) {
    partIndex = val;
  }

  void __set_inputIndex(const int8_t val) {
    inputIndex = val;
  }

  void __set_inputType(const int8_t val) {
    inputType = val;
  }

  void __set_keyResult(const int8_t val) {
    keyResult = val;
  }

  void __set_calMarkTag(const int8_t val) {
    calMarkTag = val;
  }

  bool operator == (const CSBuyItemMsg & rhs) const
  {
    if (!(partIndex == rhs.partIndex))
      return false;
    if (!(inputIndex == rhs.inputIndex))
      return false;
    if (!(inputType == rhs.inputType))
      return false;
    if (!(keyResult == rhs.keyResult))
      return false;
    if (!(calMarkTag == rhs.calMarkTag))
      return false;
    return true;
  }
  bool operator != (const CSBuyItemMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSBuyItemMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CSBuyItemMsg &a, CSBuyItemMsg &b);



#endif
