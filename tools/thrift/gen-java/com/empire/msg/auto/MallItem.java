/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.empire.msg.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MallItem implements org.apache.thrift.TBase<MallItem, MallItem._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MallItem");

  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField ITEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("itemName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField IS_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("isLimit", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField OPEN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("openTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("names", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField LANG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("langId", org.apache.thrift.protocol.TType.I16, (short)8);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CHANGED_POSES_FIELD_DESC = new org.apache.thrift.protocol.TField("changedPoses", org.apache.thrift.protocol.TType.MAP, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MallItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MallItemTupleSchemeFactory());
  }

  public int itemId; // required
  public byte category; // required
  public String itemName; // required
  /**
   * 永久物品的货币数量
   */
  public double currency; // required
  /**
   * 是否限数量
   */
  public boolean isLimit; // required
  /**
   * 上架时间
   */
  public long openTime; // required
  public List<String> names; // required
  public short langId; // required
  /**
   * 
   * @see MallItemState
   */
  public MallItemState state; // required
  public Map<Byte,Byte> changedPoses; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ITEM_ID((short)1, "itemId"),
    CATEGORY((short)2, "category"),
    ITEM_NAME((short)3, "itemName"),
    /**
     * 永久物品的货币数量
     */
    CURRENCY((short)4, "currency"),
    /**
     * 是否限数量
     */
    IS_LIMIT((short)5, "isLimit"),
    /**
     * 上架时间
     */
    OPEN_TIME((short)6, "openTime"),
    NAMES((short)7, "names"),
    LANG_ID((short)8, "langId"),
    /**
     * 
     * @see MallItemState
     */
    STATE((short)9, "state"),
    CHANGED_POSES((short)10, "changedPoses");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ITEM_ID
          return ITEM_ID;
        case 2: // CATEGORY
          return CATEGORY;
        case 3: // ITEM_NAME
          return ITEM_NAME;
        case 4: // CURRENCY
          return CURRENCY;
        case 5: // IS_LIMIT
          return IS_LIMIT;
        case 6: // OPEN_TIME
          return OPEN_TIME;
        case 7: // NAMES
          return NAMES;
        case 8: // LANG_ID
          return LANG_ID;
        case 9: // STATE
          return STATE;
        case 10: // CHANGED_POSES
          return CHANGED_POSES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ITEMID_ISSET_ID = 0;
  private static final int __CATEGORY_ISSET_ID = 1;
  private static final int __CURRENCY_ISSET_ID = 2;
  private static final int __ISLIMIT_ISSET_ID = 3;
  private static final int __OPENTIME_ISSET_ID = 4;
  private static final int __LANGID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ITEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("itemName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("isLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OPEN_TIME, new org.apache.thrift.meta_data.FieldMetaData("openTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAMES, new org.apache.thrift.meta_data.FieldMetaData("names", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LANG_ID, new org.apache.thrift.meta_data.FieldMetaData("langId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MallItemState.class)));
    tmpMap.put(_Fields.CHANGED_POSES, new org.apache.thrift.meta_data.FieldMetaData("changedPoses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MallItem.class, metaDataMap);
  }

  public MallItem() {
  }

  public MallItem(
    int itemId,
    byte category,
    String itemName,
    double currency,
    boolean isLimit,
    long openTime,
    List<String> names,
    short langId,
    MallItemState state,
    Map<Byte,Byte> changedPoses)
  {
    this();
    this.itemId = itemId;
    setItemIdIsSet(true);
    this.category = category;
    setCategoryIsSet(true);
    this.itemName = itemName;
    this.currency = currency;
    setCurrencyIsSet(true);
    this.isLimit = isLimit;
    setIsLimitIsSet(true);
    this.openTime = openTime;
    setOpenTimeIsSet(true);
    this.names = names;
    this.langId = langId;
    setLangIdIsSet(true);
    this.state = state;
    this.changedPoses = changedPoses;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MallItem(MallItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.itemId = other.itemId;
    this.category = other.category;
    if (other.isSetItemName()) {
      this.itemName = other.itemName;
    }
    this.currency = other.currency;
    this.isLimit = other.isLimit;
    this.openTime = other.openTime;
    if (other.isSetNames()) {
      List<String> __this__names = new ArrayList<String>();
      for (String other_element : other.names) {
        __this__names.add(other_element);
      }
      this.names = __this__names;
    }
    this.langId = other.langId;
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetChangedPoses()) {
      Map<Byte,Byte> __this__changedPoses = new HashMap<Byte,Byte>();
      for (Map.Entry<Byte, Byte> other_element : other.changedPoses.entrySet()) {

        Byte other_element_key = other_element.getKey();
        Byte other_element_value = other_element.getValue();

        Byte __this__changedPoses_copy_key = other_element_key;

        Byte __this__changedPoses_copy_value = other_element_value;

        __this__changedPoses.put(__this__changedPoses_copy_key, __this__changedPoses_copy_value);
      }
      this.changedPoses = __this__changedPoses;
    }
  }

  public MallItem deepCopy() {
    return new MallItem(this);
  }

  @Override
  public void clear() {
    setItemIdIsSet(false);
    this.itemId = 0;
    setCategoryIsSet(false);
    this.category = 0;
    this.itemName = null;
    setCurrencyIsSet(false);
    this.currency = 0.0;
    setIsLimitIsSet(false);
    this.isLimit = false;
    setOpenTimeIsSet(false);
    this.openTime = 0;
    this.names = null;
    setLangIdIsSet(false);
    this.langId = 0;
    this.state = null;
    this.changedPoses = null;
  }

  public int getItemId() {
    return this.itemId;
  }

  public MallItem setItemId(int itemId) {
    this.itemId = itemId;
    setItemIdIsSet(true);
    return this;
  }

  public void unsetItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  public void setItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
  }

  public byte getCategory() {
    return this.category;
  }

  public MallItem setCategory(byte category) {
    this.category = category;
    setCategoryIsSet(true);
    return this;
  }

  public void unsetCategory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORY_ISSET_ID);
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return EncodingUtils.testBit(__isset_bitfield, __CATEGORY_ISSET_ID);
  }

  public void setCategoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORY_ISSET_ID, value);
  }

  public String getItemName() {
    return this.itemName;
  }

  public MallItem setItemName(String itemName) {
    this.itemName = itemName;
    return this;
  }

  public void unsetItemName() {
    this.itemName = null;
  }

  /** Returns true if field itemName is set (has been assigned a value) and false otherwise */
  public boolean isSetItemName() {
    return this.itemName != null;
  }

  public void setItemNameIsSet(boolean value) {
    if (!value) {
      this.itemName = null;
    }
  }

  /**
   * 永久物品的货币数量
   */
  public double getCurrency() {
    return this.currency;
  }

  /**
   * 永久物品的货币数量
   */
  public MallItem setCurrency(double currency) {
    this.currency = currency;
    setCurrencyIsSet(true);
    return this;
  }

  public void unsetCurrency() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENCY_ISSET_ID);
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENCY_ISSET_ID);
  }

  public void setCurrencyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENCY_ISSET_ID, value);
  }

  /**
   * 是否限数量
   */
  public boolean isIsLimit() {
    return this.isLimit;
  }

  /**
   * 是否限数量
   */
  public MallItem setIsLimit(boolean isLimit) {
    this.isLimit = isLimit;
    setIsLimitIsSet(true);
    return this;
  }

  public void unsetIsLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISLIMIT_ISSET_ID);
  }

  /** Returns true if field isLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __ISLIMIT_ISSET_ID);
  }

  public void setIsLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISLIMIT_ISSET_ID, value);
  }

  /**
   * 上架时间
   */
  public long getOpenTime() {
    return this.openTime;
  }

  /**
   * 上架时间
   */
  public MallItem setOpenTime(long openTime) {
    this.openTime = openTime;
    setOpenTimeIsSet(true);
    return this;
  }

  public void unsetOpenTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENTIME_ISSET_ID);
  }

  /** Returns true if field openTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenTime() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENTIME_ISSET_ID);
  }

  public void setOpenTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENTIME_ISSET_ID, value);
  }

  public int getNamesSize() {
    return (this.names == null) ? 0 : this.names.size();
  }

  public java.util.Iterator<String> getNamesIterator() {
    return (this.names == null) ? null : this.names.iterator();
  }

  public void addToNames(String elem) {
    if (this.names == null) {
      this.names = new ArrayList<String>();
    }
    this.names.add(elem);
  }

  public List<String> getNames() {
    return this.names;
  }

  public MallItem setNames(List<String> names) {
    this.names = names;
    return this;
  }

  public void unsetNames() {
    this.names = null;
  }

  /** Returns true if field names is set (has been assigned a value) and false otherwise */
  public boolean isSetNames() {
    return this.names != null;
  }

  public void setNamesIsSet(boolean value) {
    if (!value) {
      this.names = null;
    }
  }

  public short getLangId() {
    return this.langId;
  }

  public MallItem setLangId(short langId) {
    this.langId = langId;
    setLangIdIsSet(true);
    return this;
  }

  public void unsetLangId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LANGID_ISSET_ID);
  }

  /** Returns true if field langId is set (has been assigned a value) and false otherwise */
  public boolean isSetLangId() {
    return EncodingUtils.testBit(__isset_bitfield, __LANGID_ISSET_ID);
  }

  public void setLangIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LANGID_ISSET_ID, value);
  }

  /**
   * 
   * @see MallItemState
   */
  public MallItemState getState() {
    return this.state;
  }

  /**
   * 
   * @see MallItemState
   */
  public MallItem setState(MallItemState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public int getChangedPosesSize() {
    return (this.changedPoses == null) ? 0 : this.changedPoses.size();
  }

  public void putToChangedPoses(byte key, byte val) {
    if (this.changedPoses == null) {
      this.changedPoses = new HashMap<Byte,Byte>();
    }
    this.changedPoses.put(key, val);
  }

  public Map<Byte,Byte> getChangedPoses() {
    return this.changedPoses;
  }

  public MallItem setChangedPoses(Map<Byte,Byte> changedPoses) {
    this.changedPoses = changedPoses;
    return this;
  }

  public void unsetChangedPoses() {
    this.changedPoses = null;
  }

  /** Returns true if field changedPoses is set (has been assigned a value) and false otherwise */
  public boolean isSetChangedPoses() {
    return this.changedPoses != null;
  }

  public void setChangedPosesIsSet(boolean value) {
    if (!value) {
      this.changedPoses = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((Integer)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((Byte)value);
      }
      break;

    case ITEM_NAME:
      if (value == null) {
        unsetItemName();
      } else {
        setItemName((String)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((Double)value);
      }
      break;

    case IS_LIMIT:
      if (value == null) {
        unsetIsLimit();
      } else {
        setIsLimit((Boolean)value);
      }
      break;

    case OPEN_TIME:
      if (value == null) {
        unsetOpenTime();
      } else {
        setOpenTime((Long)value);
      }
      break;

    case NAMES:
      if (value == null) {
        unsetNames();
      } else {
        setNames((List<String>)value);
      }
      break;

    case LANG_ID:
      if (value == null) {
        unsetLangId();
      } else {
        setLangId((Short)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((MallItemState)value);
      }
      break;

    case CHANGED_POSES:
      if (value == null) {
        unsetChangedPoses();
      } else {
        setChangedPoses((Map<Byte,Byte>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ITEM_ID:
      return Integer.valueOf(getItemId());

    case CATEGORY:
      return Byte.valueOf(getCategory());

    case ITEM_NAME:
      return getItemName();

    case CURRENCY:
      return Double.valueOf(getCurrency());

    case IS_LIMIT:
      return Boolean.valueOf(isIsLimit());

    case OPEN_TIME:
      return Long.valueOf(getOpenTime());

    case NAMES:
      return getNames();

    case LANG_ID:
      return Short.valueOf(getLangId());

    case STATE:
      return getState();

    case CHANGED_POSES:
      return getChangedPoses();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ITEM_ID:
      return isSetItemId();
    case CATEGORY:
      return isSetCategory();
    case ITEM_NAME:
      return isSetItemName();
    case CURRENCY:
      return isSetCurrency();
    case IS_LIMIT:
      return isSetIsLimit();
    case OPEN_TIME:
      return isSetOpenTime();
    case NAMES:
      return isSetNames();
    case LANG_ID:
      return isSetLangId();
    case STATE:
      return isSetState();
    case CHANGED_POSES:
      return isSetChangedPoses();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MallItem)
      return this.equals((MallItem)that);
    return false;
  }

  public boolean equals(MallItem that) {
    if (that == null)
      return false;

    boolean this_present_itemId = true;
    boolean that_present_itemId = true;
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (this.itemId != that.itemId)
        return false;
    }

    boolean this_present_category = true;
    boolean that_present_category = true;
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (this.category != that.category)
        return false;
    }

    boolean this_present_itemName = true && this.isSetItemName();
    boolean that_present_itemName = true && that.isSetItemName();
    if (this_present_itemName || that_present_itemName) {
      if (!(this_present_itemName && that_present_itemName))
        return false;
      if (!this.itemName.equals(that.itemName))
        return false;
    }

    boolean this_present_currency = true;
    boolean that_present_currency = true;
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (this.currency != that.currency)
        return false;
    }

    boolean this_present_isLimit = true;
    boolean that_present_isLimit = true;
    if (this_present_isLimit || that_present_isLimit) {
      if (!(this_present_isLimit && that_present_isLimit))
        return false;
      if (this.isLimit != that.isLimit)
        return false;
    }

    boolean this_present_openTime = true;
    boolean that_present_openTime = true;
    if (this_present_openTime || that_present_openTime) {
      if (!(this_present_openTime && that_present_openTime))
        return false;
      if (this.openTime != that.openTime)
        return false;
    }

    boolean this_present_names = true && this.isSetNames();
    boolean that_present_names = true && that.isSetNames();
    if (this_present_names || that_present_names) {
      if (!(this_present_names && that_present_names))
        return false;
      if (!this.names.equals(that.names))
        return false;
    }

    boolean this_present_langId = true;
    boolean that_present_langId = true;
    if (this_present_langId || that_present_langId) {
      if (!(this_present_langId && that_present_langId))
        return false;
      if (this.langId != that.langId)
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_changedPoses = true && this.isSetChangedPoses();
    boolean that_present_changedPoses = true && that.isSetChangedPoses();
    if (this_present_changedPoses || that_present_changedPoses) {
      if (!(this_present_changedPoses && that_present_changedPoses))
        return false;
      if (!this.changedPoses.equals(that.changedPoses))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MallItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MallItem typedOther = (MallItem)other;

    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(typedOther.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, typedOther.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemName()).compareTo(typedOther.isSetItemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemName, typedOther.itemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(typedOther.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, typedOther.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsLimit()).compareTo(typedOther.isSetIsLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLimit, typedOther.isLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenTime()).compareTo(typedOther.isSetOpenTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openTime, typedOther.openTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNames()).compareTo(typedOther.isSetNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.names, typedOther.names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLangId()).compareTo(typedOther.isSetLangId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLangId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.langId, typedOther.langId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(typedOther.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, typedOther.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChangedPoses()).compareTo(typedOther.isSetChangedPoses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChangedPoses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.changedPoses, typedOther.changedPoses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MallItem(");
    boolean first = true;

    sb.append("itemId:");
    sb.append(this.itemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    sb.append(this.category);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemName:");
    if (this.itemName == null) {
      sb.append("null");
    } else {
      sb.append(this.itemName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    sb.append(this.currency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isLimit:");
    sb.append(this.isLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("openTime:");
    sb.append(this.openTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("names:");
    if (this.names == null) {
      sb.append("null");
    } else {
      sb.append(this.names);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("langId:");
    sb.append(this.langId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("changedPoses:");
    if (this.changedPoses == null) {
      sb.append("null");
    } else {
      sb.append(this.changedPoses);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MallItemStandardSchemeFactory implements SchemeFactory {
    public MallItemStandardScheme getScheme() {
      return new MallItemStandardScheme();
    }
  }

  private static class MallItemStandardScheme extends StandardScheme<MallItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MallItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemId = iprot.readI32();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.category = iprot.readByte();
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ITEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemName = iprot.readString();
              struct.setItemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currency = iprot.readDouble();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLimit = iprot.readBool();
              struct.setIsLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPEN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.openTime = iprot.readI64();
              struct.setOpenTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.names = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2; // required
                  _elem2 = iprot.readString();
                  struct.names.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LANG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.langId = iprot.readI16();
              struct.setLangIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = MallItemState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CHANGED_POSES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                struct.changedPoses = new HashMap<Byte,Byte>(2*_map3.size);
                for (int _i4 = 0; _i4 < _map3.size; ++_i4)
                {
                  byte _key5; // required
                  byte _val6; // required
                  _key5 = iprot.readByte();
                  _val6 = iprot.readByte();
                  struct.changedPoses.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setChangedPosesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MallItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.itemId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
      oprot.writeByte(struct.category);
      oprot.writeFieldEnd();
      if (struct.itemName != null) {
        oprot.writeFieldBegin(ITEM_NAME_FIELD_DESC);
        oprot.writeString(struct.itemName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
      oprot.writeDouble(struct.currency);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_LIMIT_FIELD_DESC);
      oprot.writeBool(struct.isLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPEN_TIME_FIELD_DESC);
      oprot.writeI64(struct.openTime);
      oprot.writeFieldEnd();
      if (struct.names != null) {
        oprot.writeFieldBegin(NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.names.size()));
          for (String _iter7 : struct.names)
          {
            oprot.writeString(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LANG_ID_FIELD_DESC);
      oprot.writeI16(struct.langId);
      oprot.writeFieldEnd();
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.changedPoses != null) {
        oprot.writeFieldBegin(CHANGED_POSES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.BYTE, struct.changedPoses.size()));
          for (Map.Entry<Byte, Byte> _iter8 : struct.changedPoses.entrySet())
          {
            oprot.writeByte(_iter8.getKey());
            oprot.writeByte(_iter8.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MallItemTupleSchemeFactory implements SchemeFactory {
    public MallItemTupleScheme getScheme() {
      return new MallItemTupleScheme();
    }
  }

  private static class MallItemTupleScheme extends TupleScheme<MallItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MallItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetItemId()) {
        optionals.set(0);
      }
      if (struct.isSetCategory()) {
        optionals.set(1);
      }
      if (struct.isSetItemName()) {
        optionals.set(2);
      }
      if (struct.isSetCurrency()) {
        optionals.set(3);
      }
      if (struct.isSetIsLimit()) {
        optionals.set(4);
      }
      if (struct.isSetOpenTime()) {
        optionals.set(5);
      }
      if (struct.isSetNames()) {
        optionals.set(6);
      }
      if (struct.isSetLangId()) {
        optionals.set(7);
      }
      if (struct.isSetState()) {
        optionals.set(8);
      }
      if (struct.isSetChangedPoses()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetItemId()) {
        oprot.writeI32(struct.itemId);
      }
      if (struct.isSetCategory()) {
        oprot.writeByte(struct.category);
      }
      if (struct.isSetItemName()) {
        oprot.writeString(struct.itemName);
      }
      if (struct.isSetCurrency()) {
        oprot.writeDouble(struct.currency);
      }
      if (struct.isSetIsLimit()) {
        oprot.writeBool(struct.isLimit);
      }
      if (struct.isSetOpenTime()) {
        oprot.writeI64(struct.openTime);
      }
      if (struct.isSetNames()) {
        {
          oprot.writeI32(struct.names.size());
          for (String _iter9 : struct.names)
          {
            oprot.writeString(_iter9);
          }
        }
      }
      if (struct.isSetLangId()) {
        oprot.writeI16(struct.langId);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state.getValue());
      }
      if (struct.isSetChangedPoses()) {
        {
          oprot.writeI32(struct.changedPoses.size());
          for (Map.Entry<Byte, Byte> _iter10 : struct.changedPoses.entrySet())
          {
            oprot.writeByte(_iter10.getKey());
            oprot.writeByte(_iter10.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MallItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.itemId = iprot.readI32();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.category = iprot.readByte();
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(2)) {
        struct.itemName = iprot.readString();
        struct.setItemNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.currency = iprot.readDouble();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isLimit = iprot.readBool();
        struct.setIsLimitIsSet(true);
      }
      if (incoming.get(5)) {
        struct.openTime = iprot.readI64();
        struct.setOpenTimeIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list11 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.names = new ArrayList<String>(_list11.size);
          for (int _i12 = 0; _i12 < _list11.size; ++_i12)
          {
            String _elem13; // required
            _elem13 = iprot.readString();
            struct.names.add(_elem13);
          }
        }
        struct.setNamesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.langId = iprot.readI16();
        struct.setLangIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.state = MallItemState.findByValue(iprot.readI32());
        struct.setStateIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.BYTE, org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.changedPoses = new HashMap<Byte,Byte>(2*_map14.size);
          for (int _i15 = 0; _i15 < _map14.size; ++_i15)
          {
            byte _key16; // required
            byte _val17; // required
            _key16 = iprot.readByte();
            _val17 = iprot.readByte();
            struct.changedPoses.put(_key16, _val17);
          }
        }
        struct.setChangedPosesIsSet(true);
      }
    }
  }

}

